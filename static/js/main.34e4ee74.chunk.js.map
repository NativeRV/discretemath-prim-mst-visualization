{"version":3,"sources":["feature/prims-algorithm/mst-prim.ts","lib/GV.ts","model/index.ts","lib/mapAdjacencyMatrixToD3Graph.ts","lib/mapMatrix.ts","lib/mapCsvToMatrix.ts","feature/graph-visualization/createSphere.ts","feature/graph-visualization/createLink3D.ts","feature/graph-visualization/createLink2D.ts","feature/graph-visualization/link3DPositionUpdateFn.ts","feature/graph-visualization/createCircle.ts","feature/prims-algorithm/mst-prim-generator.ts","lib/wait.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["mstPrim","A","vertices","N","Array","keys","range","length","reached","unreached","solution","push","splice","min","rIndex","uIndex","i","j","weight","ALPHABET","Object","fromEntries","map","letter","index","createBlankArray","fill","mapMatrix","matrix","callback","row","cell","GV","name","size","dividers","inputString","numbers","Set","toUpperCase","replace","split","slice","blankMatrix","helperMatrix","value","Math","abs","adjacencyMatrix","Number","some","divider","THEMES","dark","primary","background","secondary","text","accent","light","toggleTheme","createEvent","toggleMode","loadGraphFromFile","loadGraphFromGV","setName","setSize","setDividers","fxLoadGraphFromFile","createEffect","handler","changeEvent","Promise","resolve","reject","preventDefault","reader","FileReader","onload","fileEvent","a","target","result","console","log","String","fileBlob","files","readAsText","$theme","createStore","on","theme","$mode","mode","$colors","textMatrix","join","setHilightedSubGraph","toggleIsHighlighted","$adjacencyMatrix","state","$hilightedSubGraph","restore","links","nodes","reset","$fileContents","doneData","_","payload","$gvName","$gvSize","$gvDividers","$graph","id","source","flat","sample","clock","combine","fn","isNaN","fileContents","rowString","CONFIG","makeCreateSphere","colors","highlightedSubGraph","sphere","SphereGeometry","isInHilightedSubGraph","find","node","material","MeshLambertMaterial","color","transparent","opacity","textSprite","SpriteText","sphereMesh","Mesh","composedObject","Object3D","add","makeCreateLink3D","link","backgroundColor","textHeight","makeCreateLink2D","ctx","start","end","textPos","assign","c","relLink","x","y","textAngle","atan2","PI","label","textWidth","measureText","width","font","SIZE","save","translate","rotate","fillStyle","beginPath","rect","textAlign","textBaseline","fillText","link3DPositionUpdateFn","sprite","middlePos","position","makeCreateCircle","globalScale","strokeStyle","arc","stroke","closePath","mstPrimGen","wait","seconds","setTimeout","App","useStore","graph","graph3DRef","useRef","graph2DRef","makeHandleChange","setter","e","currentTarget","useEffect","current","d3Force","strength","distance","params","graphData","nodeColor","linkColor","subGraphLink","linkWidth","mstGen","partialMST","uniqBy","flatMap","customRenderObjectParams","className","onClick","type","onChange","htmlFor","ref","nodeThreeObject","linkThreeObject","linkThreeObjectExtend","linkPositionUpdate","nodeCanvasObjectMode","nodeCanvasObject","linkCanvasObjectMode","linkCanvasObject","nodeRelSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34e4ee74.chunk.js","sourcesContent":["/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function mstPrim(A: number[][]) {\r\n  const N = A.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  while (unreached.length > 0) {\r\n    let min = 99999999999999;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    for (var i = 0; i < reached.length; i++) {\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        const weight = A[reached[i]][unreached[j]];\r\n\r\n        if (weight < min && weight !== 0) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  return solution;\r\n}","const ALPHABET = Object.fromEntries(\r\n  [\r\n    'А',\r\n    'Б',\r\n    'В',\r\n    'Г',\r\n    'Д',\r\n    'Е',\r\n    'Ё',\r\n    'Ж',\r\n    'З',\r\n    'И',\r\n    'Й',\r\n    'К',\r\n    'Л',\r\n    'М',\r\n    'Н',\r\n    'О',\r\n    'П',\r\n    'Р',\r\n    'С',\r\n    'Т',\r\n    'У',\r\n    'Ф',\r\n    'Х',\r\n    'Ц',\r\n    'Ч',\r\n    'Ш',\r\n    'Щ',\r\n    'Ъ',\r\n    'Ы',\r\n    'Ь',\r\n    'Э',\r\n    'Ю',\r\n    'Я',\r\n  ].map((letter, index) => [letter, letter === 'Ц' ? 21 : index + 1])\r\n);\r\n\r\nconst getUniqueNumbersFromString = (inputString: string) =>\r\n  [...new Set(inputString.toUpperCase().replace(' ', '').split(''))].map(\r\n    (letter) => ALPHABET[letter]\r\n  );\r\n\r\nexport const createBlankArray = (length: number) => Array(length).fill(0);\r\n\r\nexport const mapMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => number\r\n) => matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n\r\nconst forEachMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => void\r\n) =>\r\n  matrix.forEach((row, i) => row.forEach((cell, j) => callback(cell, [i, j])));\r\n\r\nexport function GV(name: string, size: number, dividers: number[]) {\r\n  const numbers = getUniqueNumbersFromString(name).slice(0, size);\r\n\r\n  const blankMatrix = createBlankArray(numbers.length).map((row) =>\r\n    createBlankArray(numbers.length)\r\n  );\r\n\r\n  // Вспомогательная матрица\r\n  const helperMatrix = mapMatrix(blankMatrix, (value, [i, j]) =>\r\n    Math.abs(numbers[j] - numbers[i])\r\n  );\r\n\r\n  //Матрица инцидентности\r\n  const adjacencyMatrix = mapMatrix(helperMatrix, (value, [i, j]) =>\r\n    Number(\r\n      dividers.some((divider) => (value % divider === 0 && i !== j ? 1 : 0))\r\n    )\r\n  );\r\n\r\n  return {\r\n    helperMatrix,\r\n    adjacencyMatrix,\r\n  };\r\n}\r\n\r\nfunction prettyPrintMatrix(mat: number[][]) {\r\n  let shape = [mat.length, mat[0].length];\r\n  function col(mat: number[][], i: number) {\r\n    return mat.map((row) => row[i]);\r\n  }\r\n  let colMaxes: number[] = [];\r\n  for (let i = 0; i < shape[1]; i++) {\r\n    colMaxes.push(\r\n      Math.max.apply(\r\n        null,\r\n        col(mat, i).map((n) => n.toString().length)\r\n      )\r\n    );\r\n  }\r\n\r\n  mat.forEach((row) => {\r\n    console.log.apply(\r\n      null,\r\n      row.map((val, j) => {\r\n        return (\r\n          new Array(colMaxes[j] - val.toString().length + 1).join(' ') +\r\n          val.toString() +\r\n          '  '\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nfunction adjMatrixToAdjList() {\r\n  /* ... */\r\n}\r\n\r\nfunction encodeAdjacencyMatrix(matrix: number[][]) {\r\n  return matrix\r\n    .map((row) => row.map((value, j) => value && j).filter(Boolean))\r\n    .flatMap((adjacents, i) => adjacents.map((adjacent) => [i, adjacent]));\r\n}\r\n\r\n// require.main === module &&\r\n//   (() => {\r\n//     const name = process.argv[2];\r\n//     const size = Number(process.argv[3]);\r\n//     const dividers = JSON.parse(process.argv[4]);\r\n//     const { helperMatrix, adjacencyMatrix } = GV(name, size, dividers);\r\n\r\n//     console.log('Цифры из ФИО: ', getUniqueNumbersFromString(name));\r\n\r\n//     console.log();\r\n//     console.log('Вспомогательная матрица: ');\r\n//     prettyPrintMatrix(helperMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Матрица смежности: ');\r\n//     prettyPrintMatrix(adjacencyMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Цифры для сайта: ');\r\n//     encodeAdjacencyMatrix(adjacencyMatrix).forEach(([i, adjacent]) =>\r\n//       console.log(i + 1, adjacent + 1)\r\n//     );\r\n//   })();\r\n","import {\r\n  combine,\r\n  createEffect,\r\n  createEvent,\r\n  createStore,\r\n  restore,\r\n  sample,\r\n} from 'effector-logger';\r\nimport { GraphData } from 'react-force-graph-2d';\r\nimport { GV } from '../lib/GV';\r\nimport {\r\n  ILink,\r\n  mapAdjacencyMatrixToD3Graph,\r\n} from '../lib/mapAdjacencyMatrixToD3Graph';\r\nimport { mapCsvToMatrix } from '../lib/mapCsvToMatrix';\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  background: string;\r\n  secondary: string;\r\n  text: string;\r\n  accent: string;\r\n}\r\n\r\nexport interface IThemes {\r\n  dark: ITheme;\r\n  light: ITheme;\r\n}\r\n\r\nexport type TDisplayMode = '3D' | '2D';\r\n\r\nexport const THEMES: IThemes = {\r\n  dark: {\r\n    primary: 'white',\r\n    background: 'black',\r\n    secondary: 'lightgrey',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n  light: {\r\n    primary: 'black',\r\n    background: 'white',\r\n    secondary: 'black',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n};\r\n\r\nexport const toggleTheme = createEvent<React.MouseEvent>('toggleTheme');\r\nexport const toggleMode = createEvent<React.MouseEvent>('toggleMode');\r\nexport const loadGraphFromFile = createEvent<React.MouseEvent>(\r\n  'loadGraphFromFile'\r\n);\r\nexport const loadGraphFromGV = createEvent<React.MouseEvent>('loadGraphFromGV');\r\n\r\nexport const setName = createEvent<string>('setName');\r\nexport const setSize = createEvent<string>('setSize');\r\nexport const setDividers = createEvent<string>('setDividers');\r\n\r\nexport const fxLoadGraphFromFile = createEffect({\r\n  name: 'fxLoadGraphFromFile',\r\n  handler: (changeEvent: React.ChangeEvent<HTMLInputElement>) =>\r\n    new Promise<string>((resolve, reject) => {\r\n      changeEvent.preventDefault();\r\n\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = async (fileEvent) => {\r\n        const text = fileEvent.target?.result;\r\n        console.log('File loaded', { text });\r\n        resolve(String(text));\r\n      };\r\n\r\n      const fileBlob = changeEvent.target.files?.[0];\r\n      console.log({ fileBlob, files: changeEvent.target.files });\r\n\r\n      if (fileBlob) {\r\n        console.log('Begin loading file');\r\n        reader.readAsText(fileBlob);\r\n      } else {\r\n        reject(\"Error: can't begin reading the file: file is null\");\r\n      }\r\n    }),\r\n});\r\n\r\nexport const $theme = createStore<keyof IThemes>('dark', {\r\n  name: '$theme',\r\n}).on(toggleTheme, (theme) => (theme === 'dark' ? 'light' : 'dark'));\r\nexport const $mode = createStore<TDisplayMode>('3D').on(toggleMode, (mode) =>\r\n  mode === '3D' ? '2D' : '3D'\r\n);\r\n\r\nexport const $colors = $theme.map((theme) => THEMES[theme]);\r\n\r\nconst matrix = [\r\n  [0, 2, 5, 100, 0, 0, 0],\r\n  [2, 0, 2, 0, 7, 0, 0],\r\n  [5, 2, 0, 1, 4, 3, 0],\r\n  [100, 0, 1, 0, 0, 4, 0],\r\n  [0, 7, 4, 0, 0, 1, 5],\r\n  [0, 0, 3, 4, 1, 0, 7],\r\n  [0, 0, 0, 0, 5, 7, 0],\r\n];\r\n\r\nconst textMatrix = matrix.map((row) => row.join(' ')).join('\\n');\r\n\r\nexport const setHilightedSubGraph = createEvent<GraphData>(\r\n  'setHilightedSubGraph'\r\n);\r\nexport const toggleIsHighlighted = createEvent<void>('toggleIsHighlighted');\r\n\r\nexport const $isHighlighted = createStore<boolean>(false).on(\r\n  toggleIsHighlighted,\r\n  (state) => !state\r\n);\r\nexport const $adjacencyMatrix = createStore<number[][]>([[]]);\r\n\r\nexport const $hilightedSubGraph = restore<GraphData>(setHilightedSubGraph, {\r\n  links: [],\r\n  nodes: [],\r\n}).reset(loadGraphFromFile, loadGraphFromGV);\r\n\r\nexport const $fileContents = createStore<string>(textMatrix, {\r\n  name: '$fileContents',\r\n}).on(fxLoadGraphFromFile.doneData, (_, payload) => payload);\r\n\r\n\r\nexport const $gvName = restore(setName, 'Зайцев Евгений Александрович');\r\nexport const $gvSize = restore(setSize, '7');\r\nexport const $gvDividers = restore(setDividers, '2 3');\r\n\r\nexport const $graph = createStore<GraphData>(\r\n  {\r\n    links: [],\r\n    nodes: [],\r\n  },\r\n  { name: '$graph' }\r\n).on($adjacencyMatrix, (state, payload) =>\r\n  mapAdjacencyMatrixToD3Graph(payload)\r\n);\r\n\r\n// Берём в графостор GV по инпутосторам по вызову loadGraphFromGV\r\nsample({\r\n  clock: loadGraphFromGV,\r\n  source: combine($gvName, $gvSize, $gvDividers),\r\n  fn: ([name, size, dividers]) =>\r\n    GV(\r\n      name.replace(' ', ''),\r\n      !isNaN(Number(size)) ? Number(size) : 7,\r\n      dividers\r\n        .split(' ')\r\n        .map((divider) => (!isNaN(Number(divider)) ? Number(divider) : 1))\r\n    ).adjacencyMatrix,\r\n  target: $adjacencyMatrix,\r\n});\r\n\r\n// Берём в графостор данные из файлостора по вызову loadGraphFromFile\r\nsample({\r\n  clock: loadGraphFromFile,\r\n  source: $fileContents,\r\n  fn: (fileContents) => mapCsvToMatrix(fileContents),\r\n  target: $adjacencyMatrix,\r\n});\r\n","import { mapMatrix } from './mapMatrix';\r\n\r\nexport interface ILink {\r\n  source: number;\r\n  target: number;\r\n  weight: number;\r\n}\r\n\r\nexport function mapAdjacencyMatrixToD3Graph(matrix: number[][]) {\r\n  const nodes = matrix.map((row, i) => ({ id: i + 1 }));\r\n  const links = mapMatrix(matrix, (cell, [i, j]) =>\r\n    cell\r\n      ? [\r\n          {\r\n            source: i + 1,\r\n            target: j + 1,\r\n            weight: cell,\r\n          },\r\n        ]\r\n      : []\r\n  ).flat(2);\r\n\r\n  return { nodes, links };\r\n}\r\n","export function mapMatrix<TFrom, TTo>(\r\n  matrix: TFrom[][],\r\n  callback: (value: TFrom, [i, j]: [number, number]) => TTo\r\n): TTo[][] {\r\n  return matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n}\r\n","export function mapCsvToMatrix(csv: string) {\r\n  return csv.split('\\n').map((rowString) => rowString.split(' ').map(Number));\r\n}\r\n","import { ICustomObjectFactoryParams } from './../../types/factories';\r\nimport SpriteText from 'three-spritetext';\r\nimport { SphereGeometry, MeshLambertMaterial, Mesh, Object3D } from 'three';\r\nimport { ITheme } from './../../model';\r\nimport { NodeObject } from 'react-force-graph-3d';\r\n\r\nconst CONFIG = {\r\n  nodeResolution: 20,\r\n};\r\n\r\nexport function makeCreateSphere({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createSphere({ id }: NodeObject) {\r\n    const sphere = new SphereGeometry(\r\n      10,\r\n      CONFIG.nodeResolution,\r\n      CONFIG.nodeResolution\r\n    );\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    const material = new MeshLambertMaterial({\r\n      color: isInHilightedSubGraph ? colors.accent : colors.primary,\r\n      transparent: true,\r\n      opacity: 0.75,\r\n    });\r\n\r\n    const textSprite = new SpriteText(String(id), 8, colors.text);\r\n    const sphereMesh = new Mesh(sphere, material);\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(sphereMesh);\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from './../../types/factories';\r\nimport SpriteText from 'three-spritetext';\r\nimport * as d3 from 'd3';\r\nimport {\r\n  LineBasicMaterial,\r\n  Vector3,\r\n  BufferGeometry,\r\n  Object3D,\r\n  Line,\r\n  BufferAttribute,\r\n  VertexColors,\r\n} from 'three';\r\nimport { ITheme } from './../../model/index';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nexport function makeCreateLink3D({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createLink3D(link: LinkObject) {\r\n    // extend link with text sprite\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const textSprite = new SpriteText(`${weight}`);\r\n    textSprite.color = colors.primary;\r\n    textSprite.backgroundColor = 'transparent';\r\n    textSprite.textHeight = 5;\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from './../../types/factories';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateLink2D({ colors }: ICustomObjectFactoryParams) {\r\n  return (link: LinkObject, ctx: CanvasRenderingContext2D) => {\r\n    const MAX_FONT_SIZE = 4;\r\n    const LABEL_NODE_MARGIN = 10;\r\n\r\n    const start = link.source;\r\n    const end = link.target;\r\n\r\n    // ignore unbound links\r\n    if (typeof start !== 'object' || typeof end !== 'object') return;\r\n\r\n    // calculate label positioning\r\n\r\n    // @ts-ignore\r\n    const textPos = Object.assign(\r\n      // @ts-ignore\r\n      ...['x', 'y'].map((c) => ({\r\n        // @ts-ignore\r\n        [c]: start[c] + (end[c] - start[c]) / 2, // calc middle point\r\n      }))\r\n    );\r\n\r\n    // @ts-ignore\r\n    const relLink = { x: end.x - start.x, y: end.y - start?.y };\r\n\r\n    let textAngle = Math.atan2(relLink.y, relLink.x);\r\n    // maintain label vertical orientation for legibility\r\n    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\r\n    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\r\n\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const label = String(weight);\r\n    const textWidth = ctx.measureText(label).width;\r\n\r\n    // estimate fontSize to fit in link length\r\n    const fontSize = SIZE / 1.5;\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n\r\n    // draw text label (with background rect)\r\n    ctx.save();\r\n    ctx.translate(textPos.x, textPos.y);\r\n    ctx.rotate(textAngle);\r\n\r\n    ctx.fillStyle = colors.background;\r\n    ctx.beginPath();\r\n    ctx.rect(-2 - textWidth / 2, -10, textWidth + 4, 20);\r\n    ctx.fill();\r\n\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(label, 0, 0);\r\n    ctx.restore();\r\n  };\r\n}\r\n","import { Object3D } from 'three';\r\n\r\ninterface Coords {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport function link3DPositionUpdateFn(\r\n  sprite: Object3D,\r\n  { start, end }: { start: Coords; end: Coords }\r\n) {\r\n  const middlePos = Object.assign(\r\n    // @ts-ignore\r\n    ...['x', 'y', 'z'].map((c) => ({\r\n      // @ts-ignore\r\n      [c]: start[c] + (end[c] - start[c]) / 2,\r\n    }))\r\n  );\r\n\r\n  // Position sprite\r\n  Object.assign(sprite.position, middlePos);\r\n\r\n  return false;\r\n}\r\n","import { ICustomObjectFactoryParams } from './../../types/factories';\r\nimport { ITheme } from '../../model';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateCircle({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createCircle(\r\n    { id, x, y }: { id?: number | string; x: number; y: number },\r\n    ctx: CanvasRenderingContext2D,\r\n    globalScale: number\r\n  ) {\r\n    const fontSize = SIZE / 1.5;\r\n\r\n    const text = String(id);\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    ctx.fillStyle = isInHilightedSubGraph ? colors.accent : colors.background;\r\n    ctx.strokeStyle = colors.primary;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, SIZE, 0, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(text, x, y);\r\n  };\r\n}\r\n","/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function* mstPrimGen(A: number[][]) {\r\n  const N = A.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  while (unreached.length > 0) {\r\n    let min = 99999999999999;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    for (var i = 0; i < reached.length; i++) {\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        const weight = A[reached[i]][unreached[j]];\r\n\r\n        if (weight < min && weight !== 0) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    yield solution;\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  return solution;\r\n}\r\n","/**\r\n * Returns a promise that resolves after `seconds`\r\n * @param seconds seconds\r\n */\r\nexport function wait(seconds: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { uniqBy } from 'lodash';\r\nimport './App.css';\r\nimport { mstPrim } from '../feature/prims-algorithm/mst-prim';\r\nimport ForceGraph3D from 'react-force-graph-3d';\r\nimport type { ForceGraphMethods } from 'react-force-graph-3d';\r\nimport ForceGraph2D, {\r\n  NodeObject,\r\n  ForceGraphProps,\r\n} from 'react-force-graph-2d';\r\nimport {\r\n  SphereGeometry,\r\n  Mesh,\r\n  MeshLambertMaterial,\r\n  Object3D,\r\n  LineBasicMaterial,\r\n  BufferGeometry,\r\n  Vector3,\r\n  Line,\r\n} from 'three';\r\nimport { Event } from 'effector-logger';\r\nimport { useStore } from 'effector-react';\r\nimport {\r\n  $colors,\r\n  $mode,\r\n  $graph,\r\n  $gvDividers,\r\n  $gvName,\r\n  $gvSize,\r\n  toggleTheme,\r\n  toggleMode,\r\n  setSize,\r\n  loadGraphFromGV,\r\n  loadGraphFromFile,\r\n  setName,\r\n  setDividers,\r\n  fxLoadGraphFromFile,\r\n  $adjacencyMatrix,\r\n  setHilightedSubGraph,\r\n  $hilightedSubGraph,\r\n} from '../model';\r\nimport SpriteText from 'three-spritetext';\r\nimport { makeCreateSphere } from '../feature/graph-visualization/createSphere';\r\nimport { makeCreateLink3D } from '../feature/graph-visualization/createLink3D';\r\nimport { makeCreateLink2D } from '../feature/graph-visualization/createLink2D';\r\nimport { link3DPositionUpdateFn } from '../feature/graph-visualization/link3DPositionUpdateFn';\r\nimport { makeCreateCircle } from '../feature/graph-visualization/createCircle';\r\nimport { range } from 'd3';\r\nimport { mstPrimGen } from '../feature/prims-algorithm/mst-prim-generator';\r\nimport { wait } from '../lib/wait';\r\n\r\nconst DISTANCE = 500;\r\n\r\nfunction App() {\r\n  const colors = useStore($colors);\r\n  const mode = useStore($mode);\r\n  const graph = useStore($graph);\r\n  const adjacencyMatrix = useStore($adjacencyMatrix);\r\n\r\n  const name = useStore($gvName);\r\n  const size = useStore($gvSize);\r\n  const dividers = useStore($gvDividers);\r\n  const highlightedSubGraph = useStore($hilightedSubGraph);\r\n\r\n  const graph3DRef = useRef<ForceGraphMethods>();\r\n  const graph2DRef = useRef<ForceGraphMethods>();\r\n\r\n  // Установка силы отторжения между вершинами\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    graph3DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('link').distance(DISTANCE);\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n  });\r\n\r\n  function makeHandleChange(setter: Event<string>) {\r\n    return function (e: React.ChangeEvent<HTMLInputElement>) {\r\n      setter(e.currentTarget.value);\r\n    };\r\n  }\r\n\r\n  const params: ForceGraphProps = {\r\n    graphData: graph,\r\n    backgroundColor: colors.background,\r\n    nodeColor: () => colors.primary,\r\n    linkColor: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? colors.accent\r\n        : colors.secondary,\r\n\r\n    linkWidth: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? 6\r\n        : 2,\r\n  };\r\n\r\n  async function handleCalculatePrimAnimClick(\r\n    e: React.MouseEvent<HTMLButtonElement>\r\n  ) {\r\n    const mstGen = mstPrimGen(adjacencyMatrix);\r\n\r\n    for (const partialMST of mstGen) {\r\n      const links = partialMST.map(([source, target]) => ({ source, target }));\r\n\r\n      // Маппим пары вершин (рёбра) в уникальные вершины задействованные в этих рёбрах\r\n      const nodes = uniqBy(\r\n        partialMST.flatMap(([source, target]) => [\r\n          { id: source },\r\n          { id: target },\r\n        ]),\r\n        'id'\r\n      );\r\n\r\n      setHilightedSubGraph({ nodes, links });\r\n      await wait(0.5);\r\n    }\r\n  }\r\n\r\n  function handleCalculatePrimClick(e: React.MouseEvent<HTMLButtonElement>) {\r\n    const mst = mstPrim(adjacencyMatrix);\r\n\r\n    const links = mst.map(([source, target]) => ({ source, target }));\r\n    const nodes = adjacencyMatrix.map((row, i) => ({ id: i + 1 }));\r\n\r\n    setHilightedSubGraph({ nodes, links });\r\n  }\r\n\r\n  const customRenderObjectParams = { colors, highlightedSubGraph };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={toggleTheme}>Theme</button>\r\n      <button onClick={toggleMode}>Mode</button>\r\n\r\n      <input type=\"file\" onChange={fxLoadGraphFromFile} />\r\n      <button onClick={loadGraphFromFile}>Load From File</button>\r\n      <br />\r\n      <label htmlFor=\"name\">Имя: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={makeHandleChange(setName)}\r\n      />\r\n      <label htmlFor=\"size\">Размер: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"size\"\r\n        value={size}\r\n        onChange={makeHandleChange(setSize)}\r\n      />\r\n      <label htmlFor=\"dividers\">Делители: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"dividers\"\r\n        value={dividers}\r\n        onChange={makeHandleChange(setDividers)}\r\n      />\r\n      <button onClick={loadGraphFromGV}>Load From GV</button>\r\n      <button onClick={handleCalculatePrimClick}>Calculate Prim's MST</button>\r\n      <button onClick={handleCalculatePrimAnimClick}>Animate Prim's MST</button>\r\n\r\n      {mode === '3D' ? (\r\n        <ForceGraph3D\r\n          {...params}\r\n          ref={graph3DRef}\r\n          nodeThreeObject={makeCreateSphere(customRenderObjectParams)}\r\n          linkThreeObject={makeCreateLink3D(customRenderObjectParams)}\r\n          linkThreeObjectExtend\r\n          linkPositionUpdate={link3DPositionUpdateFn}\r\n        />\r\n      ) : (\r\n        <ForceGraph2D\r\n          {...params}\r\n          // @ts-ignore\r\n          ref={graph2DRef}\r\n          nodeColor={colors.primary}\r\n          nodeCanvasObjectMode={() => 'after'}\r\n          nodeCanvasObject={makeCreateCircle(customRenderObjectParams) as any}\r\n          linkCanvasObjectMode={() => 'after'}\r\n          linkCanvasObject={makeCreateLink2D(customRenderObjectParams)}\r\n          nodeRelSize={10}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}