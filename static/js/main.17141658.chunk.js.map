{"version":3,"sources":["feature/prims-algorithm/mst-prim.ts","lib/createBlankArray.ts","lib/mapMatrix.ts","lib/fitMatrixToAnother.ts","lib/createBlankMatrix.ts","lib/GV.ts","lib/mapCsvToMatrix.ts","model/defaults.ts","model/effect-handlers/fileLoadHandler.ts","model/reducers/toggle.ts","model/index.ts","lib/mapAdjacencyMatrixToD3Graph.ts","lib/addWeightsMatrixToD3Graph.ts","feature/graph-visualization/createSphere.ts","feature/graph-visualization/createLink3D.ts","feature/graph-visualization/createLink2D.ts","feature/graph-visualization/link3DPositionUpdateFn.ts","feature/graph-visualization/createCircle.ts","feature/prims-algorithm/mst-prim-generator.ts","lib/wait.ts","lib/components/modal/Modal.tsx","lib/components/overlay/Overlay.tsx","lib/components/matrix-table/Matrix.tsx","feature/graph-visualization/validateNumber.ts","feature/graph-visualization/editInMatrix.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["mstPrim","A","vertices","N","Array","keys","range","length","reached","unreached","solution","push","splice","min","rIndex","uIndex","i","j","weight","createBlankArray","fillWith","fill","mapMatrix","matrix","callback","map","row","cell","fitMatrixToAnother","matrixToFit","matrixToFitTo","ALPHABET","Object","fromEntries","letter","index","GV","name","size","dividers","inputString","numbers","Set","toUpperCase","replace","split","slice","blankMatrix","helperMatrix","value","Math","abs","adjacencyMatrix","Number","some","divider","mapCsvToMatrix","csv","rowString","THEMES","dark","primary","background","secondary","text","accent","light","fileLoadHandler","changeEvent","Promise","resolve","reject","preventDefault","reader","FileReader","onload","fileEvent","a","target","result","console","log","String","fileBlob","files","readAsText","toggle","flag","toggleTheme","createEvent","toggleMode","toggleAdjacencyMatrixModal","toggleWeightMatrixModal","toggleActions","loadGraphFromGV","loadAdjacencyMatrixFromFile","loadWeightMatrixFromFile","setName","setSize","setDividers","setAdjacencyMatrix","setWeightMatrix","setHilightedSubGraph","toggleIsHighlighted","fxLoadAdjacencyMatrixFromFile","createEffect","handler","fxLoadWeightMatrixFromFile","$theme","createStore","on","theme","$mode","mode","$colors","$isAdjacencyMatrixModalOpened","$isWeightMatrixModalOpened","$isActionsMinimised","$hilightedSubGraph","restore","links","nodes","reset","$weightMatrixFileContents","doneData","$adjacencyMatrixFileContents","$adjacencyMatrix","$weightMatrix","state","payload","$gvName","$gvSize","$gvDividers","$graph","id","source","flat","weightMatrix","link","sample","clock","combine","fn","isNaN","CONFIG","makeCreateSphere","colors","highlightedSubGraph","sphere","SphereGeometry","isInHilightedSubGraph","find","node","material","MeshLambertMaterial","color","transparent","opacity","textSprite","SpriteText","sphereMesh","Mesh","composedObject","Object3D","add","makeCreateLink3D","backgroundColor","textHeight","makeCreateLink2D","ctx","start","end","textPos","assign","c","relLink","x","y","textAngle","atan2","PI","label","textWidth","measureText","width","font","SIZE","save","translate","rotate","fillStyle","beginPath","rect","textAlign","textBaseline","fillText","link3DPositionUpdateFn","sprite","middlePos","position","makeCreateCircle","globalScale","strokeStyle","arc","stroke","closePath","mstPrimGen","MAX_SAFE_INTEGER","isAdjacent","wait","seconds","setTimeout","Modal","children","visible","onClose","noop","className","onClick","Overlay","minimized","title","onToggle","Matrix","onEditCell","onAddRow","onAddCol","onRemoveRow","onRemoveCol","type","onChange","ij","e","currentTarget","validateNumber","input","defaultReturn","customCheckFn","number","editInMatrix","newValue","Mi","Mj","App","useStore","graph","isActionsMinimised","isAdjacencyMatrixModalOpened","isWeightMatrixModalOpened","graph3DRef","useRef","graph2DRef","makeHandleChange","setter","useEffect","current","d3Force","strength","distance","params","graphData","nodeLabel","nodeColor","linkColor","subGraphLink","linkWidth","mstGen","partialMST","uniqBy","flatMap","customRenderObjectParams","validatedInput","newMatrix","htmlFor","zoomToFit","ref","nodeThreeObject","linkThreeObject","linkThreeObjectExtend","linkPositionUpdate","nodeCanvasObjectMode","nodeCanvasObject","linkCanvasObjectMode","linkCanvasObject","nodeRelSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17141658.chunk.js","sourcesContent":["/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function mstPrim(A: number[][]) {\r\n  const N = A.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  while (unreached.length > 0) {\r\n    let min = 99999999999999;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    for (var i = 0; i < reached.length; i++) {\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        const weight = A[reached[i]][unreached[j]];\r\n\r\n        if (weight < min && weight !== 0) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  return solution;\r\n}","export function createBlankArray<T>(length: number, fillWith: T): T[] {\r\n  return Array(length).fill(fillWith);\r\n}\r\n","export function mapMatrix<TFrom, TTo>(\r\n  matrix: TFrom[][],\r\n  callback: (value: TFrom, [i, j]: [number, number]) => TTo\r\n): TTo[][] {\r\n  return matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n}\r\n","import { createBlankMatrix } from './createBlankMatrix';\r\nimport { mapMatrix } from './mapMatrix';\r\n\r\nexport function fitMatrixToAnother(\r\n  matrixToFit: number[][],\r\n  matrixToFitTo: number[][]\r\n) {\r\n  const blankMatrix = createBlankMatrix(matrixToFitTo.length, 1);\r\n\r\n  return mapMatrix(blankMatrix, (cell, [i, j]) =>\r\n    i === j ? 0 : matrixToFit[i]?.[j] ?? cell\r\n  );\r\n}\r\n","import { createBlankArray } from './createBlankArray';\r\n\r\nexport const createBlankMatrix = (N: number, fillWith: number) =>\r\n  createBlankArray(N, fillWith).map((row) => createBlankArray(N, fillWith));\r\n","const ALPHABET = Object.fromEntries(\r\n  [\r\n    'А',\r\n    'Б',\r\n    'В',\r\n    'Г',\r\n    'Д',\r\n    'Е',\r\n    'Ё',\r\n    'Ж',\r\n    'З',\r\n    'И',\r\n    'Й',\r\n    'К',\r\n    'Л',\r\n    'М',\r\n    'Н',\r\n    'О',\r\n    'П',\r\n    'Р',\r\n    'С',\r\n    'Т',\r\n    'У',\r\n    'Ф',\r\n    'Х',\r\n    'Ц',\r\n    'Ч',\r\n    'Ш',\r\n    'Щ',\r\n    'Ъ',\r\n    'Ы',\r\n    'Ь',\r\n    'Э',\r\n    'Ю',\r\n    'Я',\r\n  ].map((letter, index) => [letter, letter === 'Ц' ? 21 : index + 1])\r\n);\r\n\r\nconst getUniqueNumbersFromString = (inputString: string) =>\r\n  [...new Set(inputString.toUpperCase().replace(' ', '').split(''))].map(\r\n    (letter) => ALPHABET[letter]\r\n  );\r\n\r\nexport const createBlankArray = (length: number) => Array(length).fill(0);\r\n\r\nexport const mapMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => number\r\n) => matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n\r\nconst forEachMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => void\r\n) =>\r\n  matrix.forEach((row, i) => row.forEach((cell, j) => callback(cell, [i, j])));\r\n\r\nexport function GV(name: string, size: number, dividers: number[]) {\r\n  const numbers = getUniqueNumbersFromString(name).slice(0, size);\r\n\r\n  const blankMatrix = createBlankArray(numbers.length).map((row) =>\r\n    createBlankArray(numbers.length)\r\n  );\r\n\r\n  // Вспомогательная матрица\r\n  const helperMatrix = mapMatrix(blankMatrix, (value, [i, j]) =>\r\n    Math.abs(numbers[j] - numbers[i])\r\n  );\r\n\r\n  //Матрица инцидентности\r\n  const adjacencyMatrix = mapMatrix(helperMatrix, (value, [i, j]) =>\r\n    Number(\r\n      dividers.some((divider) => (value % divider === 0 && i !== j ? 1 : 0))\r\n    )\r\n  );\r\n\r\n  return {\r\n    helperMatrix,\r\n    adjacencyMatrix,\r\n  };\r\n}\r\n\r\nfunction prettyPrintMatrix(mat: number[][]) {\r\n  let shape = [mat.length, mat[0].length];\r\n  function col(mat: number[][], i: number) {\r\n    return mat.map((row) => row[i]);\r\n  }\r\n  let colMaxes: number[] = [];\r\n  for (let i = 0; i < shape[1]; i++) {\r\n    colMaxes.push(\r\n      Math.max.apply(\r\n        null,\r\n        col(mat, i).map((n) => n.toString().length)\r\n      )\r\n    );\r\n  }\r\n\r\n  mat.forEach((row) => {\r\n    console.log.apply(\r\n      null,\r\n      row.map((val, j) => {\r\n        return (\r\n          new Array(colMaxes[j] - val.toString().length + 1).join(' ') +\r\n          val.toString() +\r\n          '  '\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nfunction adjMatrixToAdjList() {\r\n  /* ... */\r\n}\r\n\r\nfunction encodeAdjacencyMatrix(matrix: number[][]) {\r\n  return matrix\r\n    .map((row) => row.map((value, j) => value && j).filter(Boolean))\r\n    .flatMap((adjacents, i) => adjacents.map((adjacent) => [i, adjacent]));\r\n}\r\n\r\n// require.main === module &&\r\n//   (() => {\r\n//     const name = process.argv[2];\r\n//     const size = Number(process.argv[3]);\r\n//     const dividers = JSON.parse(process.argv[4]);\r\n//     const { helperMatrix, adjacencyMatrix } = GV(name, size, dividers);\r\n\r\n//     console.log('Цифры из ФИО: ', getUniqueNumbersFromString(name));\r\n\r\n//     console.log();\r\n//     console.log('Вспомогательная матрица: ');\r\n//     prettyPrintMatrix(helperMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Матрица смежности: ');\r\n//     prettyPrintMatrix(adjacencyMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Цифры для сайта: ');\r\n//     encodeAdjacencyMatrix(adjacencyMatrix).forEach(([i, adjacent]) =>\r\n//       console.log(i + 1, adjacent + 1)\r\n//     );\r\n//   })();\r\n","export function mapCsvToMatrix(csv: string) {\r\n  return csv.length === 0\r\n    ? []\r\n    : csv.split('\\n').map((rowString) => rowString.split(' ').map(Number));\r\n}\r\n","import { IThemes } from '../types/modelTypes';\r\n\r\nexport const DEFAULT_ADJACENCY_MATRIX = [\r\n  [0, 2, 5, 9, 0, 0, 0],\r\n  [2, 0, 2, 0, 7, 0, 0],\r\n  [5, 2, 0, 1, 4, 3, 0],\r\n  [9, 0, 1, 0, 0, 4, 0],\r\n  [0, 7, 4, 0, 0, 1, 5],\r\n  [0, 0, 3, 4, 1, 0, 7],\r\n  [0, 0, 0, 0, 5, 7, 0],\r\n];\r\n\r\nexport const THEMES: IThemes = {\r\n  dark: {\r\n    primary: 'white',\r\n    background: 'black',\r\n    secondary: 'lightgrey',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n  light: {\r\n    primary: 'black',\r\n    background: 'white',\r\n    secondary: 'black',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n};","export function fileLoadHandler(\r\n  changeEvent: React.ChangeEvent<HTMLInputElement>\r\n) {\r\n  return new Promise<string>((resolve, reject) => {\r\n    changeEvent.preventDefault();\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (fileEvent) => {\r\n      const text = fileEvent.target?.result;\r\n      console.log('File loaded', { text });\r\n      resolve(String(text));\r\n    };\r\n\r\n    const fileBlob = changeEvent.target.files?.[0];\r\n    console.log({ fileBlob, files: changeEvent.target.files });\r\n\r\n    if (fileBlob) {\r\n      console.log('Begin loading file');\r\n      reader.readAsText(fileBlob);\r\n    } else {\r\n      reject(\"Error: can't begin reading the file: file is null\");\r\n    }\r\n  });\r\n}\r\n","export const toggle = (flag: boolean) => !flag;\r\n","import {\r\n  combine,\r\n  createEffect,\r\n  createEvent,\r\n  createStore,\r\n  restore,\r\n  sample,\r\n} from 'effector-logger';\r\nimport { GraphData } from 'react-force-graph-2d';\r\nimport { addWeightsMatrixToD3Graph } from '../lib/addWeightsMatrixToD3Graph';\r\nimport { fitMatrixToAnother } from '../lib/fitMatrixToAnother';\r\nimport { GV } from '../lib/GV';\r\nimport {\r\n  ILink,\r\n  mapAdjacencyMatrixToD3Graph,\r\n} from '../lib/mapAdjacencyMatrixToD3Graph';\r\nimport { mapCsvToMatrix } from '../lib/mapCsvToMatrix';\r\nimport { IThemes, TDisplayMode } from '../types/modelTypes';\r\nimport { THEMES } from './defaults';\r\nimport { fileLoadHandler } from './effect-handlers/fileLoadHandler';\r\nimport { toggle } from './reducers/toggle';\r\n\r\n// Ивенты для переключения темы и режима 2D/3D\r\nexport const toggleTheme = createEvent<React.MouseEvent>();\r\nexport const toggleMode = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для различных меню\r\nexport const toggleAdjacencyMatrixModal = createEvent<React.MouseEvent>();\r\nexport const toggleWeightMatrixModal = createEvent<React.MouseEvent>();\r\nexport const toggleActions = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для загрузки графа\r\nexport const loadGraphFromGV = createEvent<React.MouseEvent>();\r\nexport const loadAdjacencyMatrixFromFile = createEvent<React.MouseEvent>();\r\nexport const loadWeightMatrixFromFile = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для GV\r\nexport const setName = createEvent<string>();\r\nexport const setSize = createEvent<string>();\r\nexport const setDividers = createEvent<string>();\r\n\r\nexport const setAdjacencyMatrix = createEvent<number[][]>();\r\nexport const setWeightMatrix = createEvent<number[][]>();\r\n\r\n// Ивенты относящиеся к подсветке остовного дерева\r\nexport const setHilightedSubGraph = createEvent<GraphData>();\r\nexport const toggleIsHighlighted = createEvent<void>();\r\n\r\n// Эффект для загрузки матрицы смежности из файла\r\nexport const fxLoadAdjacencyMatrixFromFile = createEffect({\r\n  handler: fileLoadHandler,\r\n});\r\n\r\nexport const fxLoadWeightMatrixFromFile = createEffect({\r\n  handler: fileLoadHandler,\r\n});\r\n\r\n// Сторы для темы и режима\r\nexport const $theme = createStore<keyof IThemes>('dark').on(\r\n  toggleTheme,\r\n  (theme) => (theme === 'dark' ? 'light' : 'dark')\r\n);\r\nexport const $mode = createStore<TDisplayMode>('3D').on(toggleMode, (mode) =>\r\n  mode === '3D' ? '2D' : '3D'\r\n);\r\nexport const $colors = $theme.map((theme) => THEMES[theme]);\r\n\r\nexport const $isAdjacencyMatrixModalOpened = createStore(false).on(\r\n  toggleAdjacencyMatrixModal,\r\n  toggle\r\n);\r\n\r\nexport const $isWeightMatrixModalOpened = createStore(false).on(\r\n  toggleWeightMatrixModal,\r\n  toggle\r\n);\r\n\r\nexport const $isActionsMinimised = createStore(false).on(toggleActions, toggle);\r\n\r\n// Сторы для подсветки остовного дерева\r\nexport const $isHighlighted = createStore<boolean>(false).on(\r\n  toggleIsHighlighted,\r\n  toggle\r\n);\r\nexport const $hilightedSubGraph = restore<GraphData>(setHilightedSubGraph, {\r\n  links: [],\r\n  nodes: [],\r\n}).reset(loadAdjacencyMatrixFromFile, loadGraphFromGV);\r\n\r\nexport const $weightMatrixFileContents = restore<string>(\r\n  fxLoadWeightMatrixFromFile.doneData,\r\n  ''\r\n);\r\nexport const $adjacencyMatrixFileContents = restore<string>(\r\n  fxLoadAdjacencyMatrixFromFile.doneData,\r\n  ''\r\n);\r\n\r\nexport const $adjacencyMatrix = restore<number[][]>(setAdjacencyMatrix, [[]]);\r\nexport const $weightMatrix = restore<number[][]>(setWeightMatrix, [\r\n  [],\r\n]).on($adjacencyMatrix, (state, payload) =>\r\n  payload.length > state.length\r\n    ? fitMatrixToAnother(state, payload)\r\n    : state.slice(0, payload.length).map((row) => row.slice(0, payload.length))\r\n);\r\n\r\n// GV сторы\r\nexport const $gvName = restore(setName, 'Зайцев Евгений Александрович');\r\nexport const $gvSize = restore(setSize, '7');\r\nexport const $gvDividers = restore(setDividers, '2 3');\r\n\r\n// Основной стор с D3 графом\r\nexport const $graph = createStore<GraphData>({\r\n  links: [],\r\n  nodes: [],\r\n})\r\n  .on($adjacencyMatrix, (state, payload) =>\r\n    mapAdjacencyMatrixToD3Graph(payload)\r\n  )\r\n  .on($weightMatrix, (state, payload) =>\r\n    addWeightsMatrixToD3Graph(state, payload)\r\n  );\r\n\r\n// Берём в графостор GV по инпутосторам по вызову loadGraphFromGV\r\nsample({\r\n  clock: loadGraphFromGV,\r\n  source: combine($gvName, $gvSize, $gvDividers),\r\n  fn: ([name, size, dividers]) =>\r\n    GV(\r\n      name.replace(' ', ''),\r\n      !isNaN(Number(size)) ? Number(size) : 7,\r\n      dividers\r\n        .split(' ')\r\n        .map((divider) => (!isNaN(Number(divider)) ? Number(divider) : 1))\r\n    ).adjacencyMatrix,\r\n  target: $adjacencyMatrix,\r\n});\r\n\r\n// Берём в графостор данные из файлостора по вызову loadGraphFromFile\r\nsample({\r\n  clock: loadAdjacencyMatrixFromFile,\r\n  source: $adjacencyMatrixFileContents,\r\n  fn: mapCsvToMatrix,\r\n  target: $adjacencyMatrix,\r\n});\r\n\r\nsample({\r\n  clock: loadWeightMatrixFromFile,\r\n  source: $weightMatrixFileContents,\r\n  fn: mapCsvToMatrix,\r\n  target: $weightMatrix,\r\n});\r\n","import { mapMatrix } from './mapMatrix';\r\n\r\nexport interface ILink {\r\n  source: number;\r\n  target: number;\r\n  weight: number;\r\n}\r\n\r\nexport function mapAdjacencyMatrixToD3Graph(matrix: number[][]) {\r\n  const nodes = matrix.map((row, i) => ({ id: i + 1 }));\r\n  const links = mapMatrix(matrix, (cell, [i, j]) =>\r\n    cell\r\n      ? [\r\n          {\r\n            source: i + 1,\r\n            target: j + 1,\r\n            weight: 1,\r\n          },\r\n        ]\r\n      : []\r\n  ).flat(2);\r\n\r\n  return { nodes, links };\r\n}\r\n","import { GraphData } from 'react-force-graph-2d';\r\n\r\nexport function addWeightsMatrixToD3Graph(\r\n  { nodes, links }: GraphData,\r\n  weightMatrix: number[][]\r\n) {\r\n  return {\r\n    nodes,\r\n    // Добавляем вес, если он есть в матрице весов для текущего ребра, иначе 1\r\n    links: links.map((link) => ({\r\n      ...link,\r\n      // @ts-ignore\r\n      weight: weightMatrix[link.source.id - 1]?.[link.target.id - 1] ?? 1,\r\n    })),\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport SpriteText from 'three-spritetext';\r\nimport { SphereGeometry, MeshLambertMaterial, Mesh, Object3D } from 'three';\r\nimport { NodeObject } from 'react-force-graph-3d';\r\n\r\nconst CONFIG = {\r\n  nodeResolution: 20,\r\n};\r\n\r\nexport function makeCreateSphere({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createSphere({ id }: NodeObject) {\r\n    const sphere = new SphereGeometry(\r\n      10,\r\n      CONFIG.nodeResolution,\r\n      CONFIG.nodeResolution\r\n    );\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    const material = new MeshLambertMaterial({\r\n      color: isInHilightedSubGraph ? colors.accent : colors.primary,\r\n      transparent: true,\r\n      opacity: 0.75,\r\n    });\r\n\r\n    const textSprite = new SpriteText(String(id), 8, colors.text);\r\n    const sphereMesh = new Mesh(sphere, material);\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(sphereMesh);\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport SpriteText from 'three-spritetext';\r\nimport * as d3 from 'd3';\r\nimport {\r\n  LineBasicMaterial,\r\n  Vector3,\r\n  BufferGeometry,\r\n  Object3D,\r\n  Line,\r\n  BufferAttribute,\r\n  VertexColors,\r\n} from 'three';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nexport function makeCreateLink3D({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createLink3D(link: LinkObject) {\r\n    // extend link with text sprite\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const textSprite = new SpriteText(`${weight}`);\r\n    textSprite.color = colors.primary;\r\n    textSprite.backgroundColor = 'transparent';\r\n    textSprite.textHeight = 5;\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateLink2D({ colors }: ICustomObjectFactoryParams) {\r\n  return (link: LinkObject, ctx: CanvasRenderingContext2D) => {\r\n    const MAX_FONT_SIZE = 4;\r\n    const LABEL_NODE_MARGIN = 10;\r\n\r\n    const start = link.source;\r\n    const end = link.target;\r\n\r\n    // ignore unbound links\r\n    if (typeof start !== 'object' || typeof end !== 'object') return;\r\n\r\n    // calculate label positioning\r\n\r\n    // @ts-ignore\r\n    const textPos = Object.assign(\r\n      // @ts-ignore\r\n      ...['x', 'y'].map((c) => ({\r\n        // @ts-ignore\r\n        [c]: start[c] + (end[c] - start[c]) / 2, // calc middle point\r\n      }))\r\n    );\r\n\r\n    // @ts-ignore\r\n    const relLink = { x: end.x - start.x, y: end.y - start?.y };\r\n\r\n    let textAngle = Math.atan2(relLink.y, relLink.x);\r\n    // maintain label vertical orientation for legibility\r\n    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\r\n    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\r\n\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const label = String(weight);\r\n    const textWidth = ctx.measureText(label).width;\r\n\r\n    // estimate fontSize to fit in link length\r\n    const fontSize = SIZE / 1.5;\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n\r\n    // draw text label (with background rect)\r\n    ctx.save();\r\n    ctx.translate(textPos.x, textPos.y);\r\n    ctx.rotate(textAngle);\r\n\r\n    ctx.fillStyle = colors.background;\r\n    ctx.beginPath();\r\n    ctx.rect(-2 - textWidth / 2, -10, textWidth + 4, 20);\r\n    ctx.fill();\r\n\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(label, 0, 0);\r\n    ctx.restore();\r\n  };\r\n}\r\n","import { Object3D } from 'three';\r\n\r\ninterface Coords {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport function link3DPositionUpdateFn(\r\n  sprite: Object3D,\r\n  { start, end }: { start: Coords; end: Coords }\r\n) {\r\n  const middlePos = Object.assign(\r\n    // @ts-ignore\r\n    ...['x', 'y', 'z'].map((c) => ({\r\n      // @ts-ignore\r\n      [c]: start[c] + (end[c] - start[c]) / 2,\r\n    }))\r\n  );\r\n\r\n  // Position sprite\r\n  Object.assign(sprite.position, middlePos);\r\n\r\n  return false;\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateCircle({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createCircle(\r\n    { id, x, y }: { id?: number | string; x: number; y: number },\r\n    ctx: CanvasRenderingContext2D,\r\n    globalScale: number\r\n  ) {\r\n    const fontSize = SIZE / 1.5;\r\n\r\n    const text = String(id);\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    ctx.fillStyle = isInHilightedSubGraph ? colors.accent : colors.background;\r\n    ctx.strokeStyle = colors.primary;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, SIZE, 0, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(text, x, y);\r\n  };\r\n}\r\n","/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function* mstPrimGen(\r\n  adjacencyMatrix: number[][],\r\n  weightMatrix: number[][]\r\n) {\r\n  const N = adjacencyMatrix.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  while (unreached.length > 0) {\r\n    let min = Number.MAX_SAFE_INTEGER;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    for (var i = 0; i < reached.length; i++) {\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        const weight = weightMatrix[reached[i]]?.[unreached[j]] ?? 1;\r\n        const isAdjacent = adjacencyMatrix[reached[i]][unreached[j]] !== 0;\r\n\r\n        if (weight < min && isAdjacent) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    yield solution;\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  return solution;\r\n}\r\n","/**\r\n * Returns a promise that resolves after `seconds`\r\n * @param seconds seconds\r\n */\r\nexport function wait(seconds: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\r\n}\r\n","import { noop } from 'lodash';\r\nimport './modal.scss';\r\n\r\ninterface IModalProps {\r\n  children: React.ReactNode;\r\n  visible?: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport function Modal({\r\n  children,\r\n  visible = false,\r\n  onClose = noop,\r\n}: IModalProps) {\r\n  return visible ? (\r\n    <div className=\"modal\">\r\n      {children}\r\n      <div className=\"modal__close\" onClick={onClose}>\r\n        ×\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n","import { noop } from 'lodash';\r\nimport './overlay.scss';\r\n\r\ninterface IOverlayProps {\r\n  children: React.ReactNode;\r\n  minimized?: boolean;\r\n  title?: React.ReactNode;\r\n  onToggle?: () => void;\r\n}\r\n\r\nexport function Overlay({\r\n  children,\r\n  minimized = false,\r\n  title = 'Actions',\r\n  onToggle = noop,\r\n}: IOverlayProps) {\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"overlay__title-container\">\r\n        {title}\r\n        <div className={`overlay__toggle`} onClick={onToggle}>\r\n          {minimized ? '▼' : '▲'}\r\n        </div>\r\n      </div>\r\n      {!minimized && (\r\n        <div className=\"overlay__content-container\">{children}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { noop } from 'lodash';\r\nimport './matrix.scss';\r\n\r\ninterface IMatrixProps {\r\n  matrix: number[][];\r\n  onEditCell?: (ij: [number, number], newValue: string) => void;\r\n  onAddRow?: () => void;\r\n  onAddCol?: () => void;\r\n  onRemoveRow?: () => void;\r\n  onRemoveCol?: () => void;\r\n}\r\n\r\nexport function Matrix({\r\n  matrix,\r\n  onEditCell = noop,\r\n  onAddRow = noop,\r\n  onAddCol = noop,\r\n  onRemoveRow = noop,\r\n  onRemoveCol = noop,\r\n}: IMatrixProps) {\r\n  function makeHandleChange(ij: [number, number]) {\r\n    return function handleKeyPress(e: React.ChangeEvent<HTMLInputElement>) {\r\n      onEditCell(ij, e.currentTarget.value);\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div className=\"matrix\">\r\n      {matrix.map((row, i) => (\r\n        <div className=\"matrix__row\">\r\n          {row.map((cell, j) => (\r\n            <div className=\"matrix__cell-container\">\r\n              <input\r\n                className=\"matrix__cell\"\r\n                type=\"text\"\r\n                value={cell}\r\n                onChange={makeHandleChange([i, j])}\r\n              />\r\n              <div className=\"matrix__index\">\r\n                {i + 1},{j + 1}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <div className=\"matrix__controls\">\r\n        <div className=\"matrix__controls-row\">\r\n          <button className=\"matrix__add-row\" onClick={onAddRow}>+</button>\r\n          <button className=\"matrix__rem-row\" onClick={onRemoveRow}>-</button>\r\n        </div>\r\n        <div className=\"matrix__controls-col\">\r\n          <button className=\"matrix__add-col\" onClick={onAddCol}>+</button>\r\n          <button className=\"matrix__rem-col\" onClick={onRemoveCol}>-</button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n","export function validateNumber(\r\n  input: string,\r\n  defaultReturn: number,\r\n  customCheckFn = (input: number) => true\r\n) {\r\n  const number = Number(input);\r\n\r\n  return !isNaN(number) && customCheckFn(number) ? number : defaultReturn;\r\n}\r\n","import { mapMatrix } from '../../lib/mapMatrix';\r\n\r\nexport function editInMatrix(\r\n  matrix: number[][],\r\n  [i, j]: [number, number],\r\n  newValue: number\r\n) {\r\n  return mapMatrix(matrix, (value, [Mi, Mj]) =>\r\n    (Mi === i && Mj === j) || (Mi === j && Mj === i) ? newValue : value\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { uniqBy } from 'lodash';\r\nimport './App.scss';\r\nimport '../lib/styles/classes.scss';\r\nimport { mstPrim } from '../feature/prims-algorithm/mst-prim';\r\nimport ForceGraph3D from 'react-force-graph-3d';\r\nimport type { ForceGraphMethods } from 'react-force-graph-3d';\r\nimport ForceGraph2D, { ForceGraphProps } from 'react-force-graph-2d';\r\n\r\nimport { Event } from 'effector-logger';\r\nimport { useStore } from 'effector-react';\r\nimport {\r\n  $colors,\r\n  $mode,\r\n  $graph,\r\n  $gvDividers,\r\n  $gvName,\r\n  $gvSize,\r\n  toggleTheme,\r\n  toggleMode,\r\n  setSize,\r\n  loadGraphFromGV,\r\n  loadAdjacencyMatrixFromFile,\r\n  loadWeightMatrixFromFile,\r\n  setName,\r\n  setDividers,\r\n  fxLoadAdjacencyMatrixFromFile,\r\n  fxLoadWeightMatrixFromFile,\r\n  $adjacencyMatrix,\r\n  setHilightedSubGraph,\r\n  $hilightedSubGraph,\r\n  $weightMatrix,\r\n  toggleAdjacencyMatrixModal,\r\n  toggleWeightMatrixModal,\r\n  toggleActions,\r\n  $isActionsMinimised,\r\n  $isAdjacencyMatrixModalOpened,\r\n  $isWeightMatrixModalOpened,\r\n  $theme,\r\n  setAdjacencyMatrix,\r\n  setWeightMatrix,\r\n} from '../model';\r\nimport { makeCreateSphere } from '../feature/graph-visualization/createSphere';\r\nimport { makeCreateLink3D } from '../feature/graph-visualization/createLink3D';\r\nimport { makeCreateLink2D } from '../feature/graph-visualization/createLink2D';\r\nimport { link3DPositionUpdateFn } from '../feature/graph-visualization/link3DPositionUpdateFn';\r\nimport { makeCreateCircle } from '../feature/graph-visualization/createCircle';\r\nimport { mstPrimGen } from '../feature/prims-algorithm/mst-prim-generator';\r\nimport { wait } from '../lib/wait';\r\nimport { Modal } from '../lib/components/modal/Modal';\r\nimport { Overlay } from '../lib/components/overlay/Overlay';\r\nimport { Matrix } from '../lib/components/matrix-table/Matrix';\r\nimport { validateNumber } from '../feature/graph-visualization/validateNumber';\r\nimport { editInMatrix } from '../feature/graph-visualization/editInMatrix';\r\n\r\nconst DISTANCE = 500;\r\n\r\nexport function App() {\r\n  const colors = useStore($colors);\r\n  const mode = useStore($mode);\r\n  const theme = useStore($theme);\r\n\r\n  const graph = useStore($graph);\r\n  const adjacencyMatrix = useStore($adjacencyMatrix);\r\n  const weightMatrix = useStore($weightMatrix);\r\n\r\n  const name = useStore($gvName);\r\n  const size = useStore($gvSize);\r\n  const dividers = useStore($gvDividers);\r\n\r\n  const highlightedSubGraph = useStore($hilightedSubGraph);\r\n\r\n  const isActionsMinimised = useStore($isActionsMinimised);\r\n  const isAdjacencyMatrixModalOpened = useStore($isAdjacencyMatrixModalOpened);\r\n  const isWeightMatrixModalOpened = useStore($isWeightMatrixModalOpened);\r\n\r\n  const graph3DRef = useRef<ForceGraphMethods>();\r\n  const graph2DRef = useRef<ForceGraphMethods>();\r\n\r\n  // Установка силы отторжения между вершинами\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    graph3DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('link').distance(DISTANCE);\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n  });\r\n\r\n  function makeHandleChange(setter: Event<string>) {\r\n    return function (e: React.ChangeEvent<HTMLInputElement>) {\r\n      setter(e.currentTarget.value);\r\n    };\r\n  }\r\n\r\n  const params: ForceGraphProps = {\r\n    graphData: graph,\r\n    backgroundColor: colors.background,\r\n    nodeLabel: (node) => String(node.id),\r\n    nodeColor: () => colors.primary,\r\n    linkColor: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? colors.accent\r\n        : colors.secondary,\r\n\r\n    linkWidth: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? 6\r\n        : 2,\r\n  };\r\n\r\n  async function handleCalculatePrimAnimClick(\r\n    e: React.MouseEvent<HTMLButtonElement>\r\n  ) {\r\n    // Генераторная версия алгоритма, возвращающая значения по шагам\r\n    const mstGen = mstPrimGen(adjacencyMatrix, weightMatrix);\r\n\r\n    for (const partialMST of mstGen) {\r\n      const links = partialMST.map(([source, target]) => ({ source, target }));\r\n\r\n      // Маппим пары вершин (рёбра) в уникальные вершины задействованные в этих рёбрах\r\n      const nodes = uniqBy(\r\n        partialMST.flatMap(([source, target]) => [\r\n          { id: source },\r\n          { id: target },\r\n        ]),\r\n        'id'\r\n      );\r\n\r\n      setHilightedSubGraph({ nodes, links });\r\n      await wait(0.5);\r\n    }\r\n  }\r\n\r\n  function handleCalculatePrimClick(e: React.MouseEvent<HTMLButtonElement>) {\r\n    const mst = mstPrim(adjacencyMatrix);\r\n\r\n    const links = mst.map(([source, target]) => ({ source, target }));\r\n    const nodes = adjacencyMatrix.map((row, i) => ({ id: i + 1 }));\r\n\r\n    setHilightedSubGraph({ nodes, links });\r\n  }\r\n\r\n  function handleZoomToFitClick() {\r\n    graph3DRef.current?.zoomToFit(400);\r\n    graph2DRef.current?.zoomToFit(400);\r\n  }\r\n\r\n  const customRenderObjectParams = { colors, highlightedSubGraph };\r\n\r\n  function handleEditAdjacencyMatrixCell(\r\n    [i, j]: [number, number],\r\n    newValue: string\r\n  ) {\r\n    const validatedInput = validateNumber(\r\n      newValue,\r\n      0,\r\n      (value) => (value === 0 || value === 1) && i !== j\r\n    );\r\n    const newMatrix = editInMatrix(adjacencyMatrix, [i, j], validatedInput);\r\n\r\n    setAdjacencyMatrix(newMatrix);\r\n  }\r\n\r\n  function handleEditWeightMatrixCell(\r\n    [i, j]: [number, number],\r\n    newValue: string\r\n  ) {\r\n    const validatedInput = validateNumber(newValue, 0, () => i !== j);\r\n    const newMatrix = editInMatrix(weightMatrix, [i, j], validatedInput);\r\n\r\n    setWeightMatrix(newMatrix);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal\r\n        visible={isAdjacencyMatrixModalOpened}\r\n        onClose={toggleAdjacencyMatrixModal}\r\n      >\r\n        <p>Матрица смежности: </p>\r\n        <Matrix\r\n          matrix={adjacencyMatrix}\r\n          onEditCell={handleEditAdjacencyMatrixCell}\r\n        ></Matrix>\r\n      </Modal>\r\n      <Modal\r\n        visible={isWeightMatrixModalOpened}\r\n        onClose={toggleWeightMatrixModal}\r\n      >\r\n        <p>Матрица весов: </p>\r\n        <Matrix\r\n          matrix={weightMatrix}\r\n          onEditCell={handleEditWeightMatrixCell}\r\n        ></Matrix>\r\n      </Modal>\r\n\r\n      <Overlay minimized={isActionsMinimised} onToggle={toggleActions}>\r\n        <button onClick={toggleTheme}>Тема: {theme}</button>\r\n        <br />\r\n        <button onClick={toggleMode}>Режим: {mode}</button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <label htmlFor=\"adjacencyMatrixFile\">Adjacency matrix: </label>\r\n        <input type=\"file\" onChange={fxLoadAdjacencyMatrixFromFile} />\r\n        <br />\r\n        <label htmlFor=\"weightMatrixFile\">Weight matrix: </label>\r\n        <input type=\"file\" onChange={fxLoadWeightMatrixFromFile} />\r\n        <br />\r\n\r\n        <button onClick={loadAdjacencyMatrixFromFile}>\r\n          Загрузить матрицу смежности из файла\r\n        </button>\r\n        <button onClick={loadWeightMatrixFromFile}>\r\n          Загрузить матрицу весов из файла\r\n        </button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <label htmlFor=\"name\">Имя: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={makeHandleChange(setName)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"size\">Размер: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"size\"\r\n          value={size}\r\n          onChange={makeHandleChange(setSize)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"dividers\">Делители: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dividers\"\r\n          value={dividers}\r\n          onChange={makeHandleChange(setDividers)}\r\n        />\r\n        <br />\r\n        <button onClick={loadGraphFromGV}>Сгенерировать из GV</button>\r\n        <br />\r\n        <br />\r\n        <button onClick={handleCalculatePrimClick}>\r\n          Рассчитать алгоритм Прима\r\n        </button>\r\n        <br />\r\n        <button onClick={handleCalculatePrimAnimClick}>\r\n          Анимировать алгоритм Прима\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <button onClick={handleZoomToFitClick}>\r\n          Масштабировать чтобы помещалось\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <button onClick={toggleAdjacencyMatrixModal}>\r\n          Изменить матрицу смежности\r\n        </button>\r\n        <br />\r\n        <button onClick={toggleWeightMatrixModal}>\r\n          Изменить матрицу весов\r\n        </button>\r\n      </Overlay>\r\n\r\n      {mode === '3D' ? (\r\n        <ForceGraph3D\r\n          {...params}\r\n          ref={graph3DRef}\r\n          nodeThreeObject={makeCreateSphere(customRenderObjectParams)}\r\n          linkThreeObject={makeCreateLink3D(customRenderObjectParams)}\r\n          linkThreeObjectExtend\r\n          linkPositionUpdate={link3DPositionUpdateFn}\r\n        />\r\n      ) : (\r\n        <ForceGraph2D\r\n          {...params}\r\n          // @ts-ignore\r\n          ref={graph2DRef}\r\n          nodeColor={colors.primary}\r\n          nodeCanvasObjectMode={() => 'after'}\r\n          nodeCanvasObject={makeCreateCircle(customRenderObjectParams) as any}\r\n          linkCanvasObjectMode={() => 'after'}\r\n          linkCanvasObject={makeCreateLink2D(customRenderObjectParams)}\r\n          nodeRelSize={30}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}