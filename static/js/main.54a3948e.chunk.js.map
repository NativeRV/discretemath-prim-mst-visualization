{"version":3,"sources":["lib/matrixToPrettyString.ts","feature/prims-algorithm/mst-prim.ts","lib/createBlankArray.ts","lib/createBlankMatrix.ts","lib/mapMatrix.ts","lib/fitMatrixToAnother.ts","lib/GV.ts","lib/mapCsvToMatrix.ts","model/defaults.ts","model/effect-handlers/fileLoadHandler.ts","model/reducers/toggle.ts","model/index.ts","lib/mapAdjacencyMatrixToD3Graph.ts","feature/graph-visualization/createSphere.ts","feature/graph-visualization/createLink3D.ts","feature/graph-visualization/createLink2D.ts","feature/graph-visualization/link3DPositionUpdateFn.ts","feature/graph-visualization/createCircle.ts","feature/prims-algorithm/mst-prim-generator.ts","lib/wait.ts","lib/components/modal/Modal.tsx","lib/components/overlay/Overlay.tsx","lib/components/matrix-table/Matrix.tsx","feature/graph-visualization/validateNumber.ts","feature/graph-visualization/editInMatrix.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["matrixToPrettyString","matrix","shape","length","col","mat","i","map","row","colMaxes","push","Math","max","apply","n","toString","stringRows","forEach","val","j","Array","join","mstPrim","adjacencyMatrix","weightMatrix","vertices","N","keys","range","reached","unreached","solution","listing","splice","min","Number","MAX_SAFE_INTEGER","rIndex","uIndex","weight","isAdjacent","createBlankArray","fillWith","fill","createBlankMatrix","mapMatrix","callback","cell","fitMatrixToAnother","matrixToFit","matrixToFitTo","blankMatrix","ALPHABET","Object","fromEntries","letter","index","GV","name","size","dividers","inputString","numbers","Set","toUpperCase","replace","split","slice","helperMatrix","value","abs","some","divider","mapCsvToMatrix","csv","rowString","THEMES","dark","primary","background","secondary","text","accent","light","fileLoadHandler","changeEvent","Promise","resolve","reject","preventDefault","reader","FileReader","onload","fileEvent","a","target","result","console","log","String","fileBlob","files","readAsText","toggle","flag","toggleTheme","createEvent","toggleMode","toggleAdjacencyMatrixModal","toggleWeightMatrixModal","toggleListingModal","toggleActions","loadGraphFromGV","loadAdjacencyMatrixFromFile","loadWeightMatrixFromFile","addNodeToGraph","removeLastNodeFromGraph","setName","setSize","setDividers","setAdjacencyMatrix","setWeightMatrix","setListingString","setHilightedSubGraph","toggleIsHighlighted","fxLoadAdjacencyMatrixFromFile","createEffect","handler","fxLoadWeightMatrixFromFile","$theme","createStore","on","theme","$mode","mode","$colors","$isAdjacencyMatrixModalOpened","$isWeightMatrixModalOpened","$isListingModalOpened","$isActionsMinimised","$listingString","restore","$hilightedSubGraph","links","nodes","reset","$weightMatrixFileContents","doneData","$adjacencyMatrixFileContents","$adjacencyMatrix","state","$weightMatrix","payload","$gvName","$gvSize","$gvDividers","$graph","combine","id","source","flat","mapAdjacencyAndWeightMatrixToD3Graph","sample","clock","fn","isNaN","CONFIG","makeCreateSphere","colors","highlightedSubGraph","sphere","SphereGeometry","isInHilightedSubGraph","find","node","material","MeshLambertMaterial","color","transparent","opacity","textSprite","SpriteText","sphereMesh","Mesh","composedObject","Object3D","add","makeCreateLink3D","link","backgroundColor","textHeight","makeCreateLink2D","ctx","start","end","textPos","assign","c","relLink","x","y","textAngle","atan2","PI","label","textWidth","measureText","width","font","SIZE","save","translate","rotate","fillStyle","beginPath","rect","textAlign","textBaseline","fillText","link3DPositionUpdateFn","sprite","middlePos","position","makeCreateCircle","globalScale","strokeStyle","arc","stroke","closePath","mstPrimGen","wait","seconds","setTimeout","Modal","children","visible","onClose","noop","className","onClick","Overlay","minimized","title","onToggle","Matrix","onEditCell","onAddRow","onAddCol","onRemoveRow","onRemoveCol","type","onChange","ij","e","currentTarget","validateNumber","input","defaultReturn","customCheckFn","number","editInMatrix","newValue","Mi","Mj","App","useStore","graph","isListingModalOpened","listingString","isActionsMinimised","isAdjacencyMatrixModalOpened","isWeightMatrixModalOpened","graph3DRef","useRef","graph2DRef","makeHandleChange","setter","useEffect","current","d3Force","strength","distance","params","graphData","nodeLabel","nodeColor","linkColor","subGraphLink","linkWidth","mstGen","partialMST","uniqBy","flatMap","customRenderObjectParams","validatedInput","newMatrix","data","Blob","textFile","window","URL","revokeObjectURL","createObjectURL","element","document","createElement","style","height","href","download","body","appendChild","click","removeChild","htmlFor","zoomToFit","ref","nodeThreeObject","linkThreeObject","linkThreeObjectExtend","linkPositionUpdate","nodeCanvasObjectMode","nodeCanvasObject","linkCanvasObjectMode","linkCanvasObject","nodeRelSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.54a3948e.chunk.js","sourcesContent":["export function matrixToPrettyString(matrix: number[][]) {\r\n  let shape = [matrix.length, matrix[0].length];\r\n\r\n  function col(mat: number[][], i: number) {\r\n    return mat.map((row) => row[i]);\r\n  }\r\n  let colMaxes: number[] = [];\r\n  for (let i = 0; i < shape[1]; i++) {\r\n    colMaxes.push(\r\n      Math.max.apply(\r\n        null,\r\n        col(matrix, i).map((n) => n.toString().length)\r\n      )\r\n    );\r\n  }\r\n\r\n  const stringRows: string[][] = [];\r\n\r\n  matrix.forEach((row) => {\r\n    stringRows.push(\r\n      row.map((val, j) => {\r\n        return (\r\n          new Array(colMaxes[j] - val.toString().length + 1).join(' ') +\r\n          val.toString() +\r\n          '  '\r\n        );\r\n      })\r\n    );\r\n  });\r\n\r\n  return stringRows.join('\\n');\r\n}\r\n","import { matrixToPrettyString } from '../../lib/matrixToPrettyString';\r\n\r\n/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function mstPrim(adjacencyMatrix: number[][], weightMatrix: number[][]) {\r\n  const N = adjacencyMatrix.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  const listing: string[] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  listing.push(`Входные данные данные: `);\r\n  listing.push(`---- Матрица смежности: `);\r\n  listing.push(matrixToPrettyString(adjacencyMatrix));\r\n  listing.push(`---- Матрица весов: `);\r\n  listing.push(matrixToPrettyString(weightMatrix));\r\n\r\n  listing.push(``);\r\n  listing.push(`Задаём исходные данные: `);\r\n  listing.push(`min: integer = INF`);\r\n  listing.push(\r\n    `reached: integer[] = [1] // Массив проверенных (пройденных вершин) - занесена первая`\r\n  );\r\n  listing.push(\r\n    `unreached: integer[] = 2..N // Массив непроверенных (непройденных вершин) - занесены все остальные кроме первой`\r\n  );\r\n  listing.push(`min: integer = INF`);\r\n  listing.push(`rIndex: integer = 0 // Сохранённый индекс в массиве reached`);\r\n  listing.push(`uIndex: integer = 0 // Сохранённый индекс в массиве unreached`);\r\n\r\n  listing.push(``);\r\n  listing.push(\r\n    `Начинаем цикл без счётчика до тех пор пока unreached не будет пуст...`\r\n  );\r\n  while (unreached.length > 0) {\r\n    let min = Number.MAX_SAFE_INTEGER;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    listing.push('---- Проход цикла по проверенным вершинам, счётчик i...');\r\n    for (var i = 0; i < reached.length; i++) {\r\n      listing.push(`-------- Цикл i: ${i + 1}`);\r\n\r\n      listing.push(\r\n        `-------- Для вершины ${\r\n          i + 1\r\n        } делаем проход цикла по непроверенным вершинам, счётчик j...`\r\n      );\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        listing.push(`------------ Цикл j: ${j + 1}`);\r\n\r\n        const weight = weightMatrix[reached[i]]?.[unreached[j]] ?? 1;\r\n        const isAdjacent = adjacencyMatrix[reached[i]][unreached[j]] !== 0;\r\n\r\n        listing.push(\r\n          `------------ Сравниваем вес ребра ${i + 1},${\r\n            j + 1\r\n          } с min, если он меньше, и ребро смежно с текущей компонентой, то записываем его в min...`\r\n        );\r\n        if (weight < min && isAdjacent) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n\r\n          listing.push(\r\n            `---------------- Вес ребра ${i + 1},${\r\n              j + 1\r\n            } меньше min. Новые значения: `\r\n          );\r\n          listing.push(`---------------- min = ${min}`);\r\n          listing.push(`---------------- rIndex = ${rIndex + 1}`);\r\n          listing.push(`---------------- uIndex = ${uIndex + 1}`);\r\n        } else {\r\n          listing.push(\r\n            `---------------- Вес ребра больше, или вершина не смежна с текущей компонентой.`\r\n          );\r\n          listing.push(`---------------- Данные не изменены.`);\r\n        }\r\n\r\n        listing.push(`------------ Конец цикла j: ${j + 1}`);\r\n      }\r\n      listing.push(`-------- Конец цикла i: ${i + 1}`);\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    listing.push(``);\r\n    listing.push(\r\n      `---- Записываем найденное ребро в решение: [${reached[rIndex] + 1}, ${\r\n        unreached[uIndex] + 1\r\n      }]`\r\n    );\r\n\r\n    listing.push(``);\r\n    listing.push(\r\n      `---- Изменяем данные перед концом итерации цикла без счётчика: `\r\n    );\r\n    listing.push(`---- reached = reached + [${unreached[uIndex]}]`);\r\n    listing.push(`---- unreached = unreached - [${unreached[uIndex]}]`);\r\n    listing.push(`---- Конец итерации цикла без счётчика.`);\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  listing.push(\r\n    `---- Конец цикла без счётчика. Алгоритм завершён. Решение (рёбра маршрута): `\r\n  );\r\n  listing.push(matrixToPrettyString(solution));\r\n\r\n  return { solution, listing };\r\n}\r\n\r\n// Чистый алгоритм:\r\n// /**\r\n//  * Range from 0..N exclusive (0..N-1)\r\n//  * @param N end index, exclusive\r\n//  */\r\n// const range = (N: number) => [...Array(N).keys()];\r\n\r\n// export function mstPrim(A: number[][]) {\r\n//   const N = A.length;\r\n//   const vertices = range(N);\r\n//   const reached = [];\r\n//   const unreached = [...vertices];\r\n//   const solution: [number, number][] = [];\r\n\r\n//   reached.push(unreached[1]);\r\n//   unreached.splice(1, 1);\r\n\r\n//   while (unreached.length > 1) {\r\n//     let min = 100000000000000;\r\n//     let rIndex = 1;\r\n//     let uIndex = 1;\r\n\r\n//     for (var i = 1; i < reached.length; i++) {\r\n//       for (var j = 1; j < unreached.length; j++) {\r\n//         const weight = A[reached[i]][unreached[j]];\r\n\r\n//         if (weight < min && weight !== 1) {\r\n//           min = weight;\r\n//           rIndex = i;\r\n//           uIndex = j;\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     solution.push([reached[rIndex] + 2, unreached[uIndex] + 1]);\r\n\r\n//     reached.push(unreached[uIndex]);\r\n//     unreached.splice(uIndex, 2);\r\n//   }\r\n\r\n//   return solution;\r\n// }","export function createBlankArray<T>(length: number, fillWith: T): T[] {\r\n  return Array(length).fill(fillWith);\r\n}\r\n","import { createBlankArray } from './createBlankArray';\r\n\r\nexport const createBlankMatrix = (N: number, fillWith: number) =>\r\n  createBlankArray(N, fillWith).map((row) => createBlankArray(N, fillWith));\r\n","export function mapMatrix<TFrom, TTo>(\r\n  matrix: TFrom[][],\r\n  callback: (value: TFrom, [i, j]: [number, number]) => TTo\r\n): TTo[][] {\r\n  return matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n}\r\n","import { createBlankMatrix } from './createBlankMatrix';\r\nimport { mapMatrix } from './mapMatrix';\r\n\r\nexport function fitMatrixToAnother(\r\n  matrixToFit: number[][],\r\n  matrixToFitTo: number[][],\r\n  fillWith = 1\r\n) {\r\n  const blankMatrix = createBlankMatrix(matrixToFitTo.length, fillWith);\r\n\r\n  return mapMatrix(blankMatrix, (cell, [i, j]) =>\r\n    i === j ? 0 : matrixToFit[i]?.[j] ?? cell\r\n  );\r\n}\r\n","const ALPHABET = Object.fromEntries(\r\n  [\r\n    'А',\r\n    'Б',\r\n    'В',\r\n    'Г',\r\n    'Д',\r\n    'Е',\r\n    'Ё',\r\n    'Ж',\r\n    'З',\r\n    'И',\r\n    'Й',\r\n    'К',\r\n    'Л',\r\n    'М',\r\n    'Н',\r\n    'О',\r\n    'П',\r\n    'Р',\r\n    'С',\r\n    'Т',\r\n    'У',\r\n    'Ф',\r\n    'Х',\r\n    'Ц',\r\n    'Ч',\r\n    'Ш',\r\n    'Щ',\r\n    'Ъ',\r\n    'Ы',\r\n    'Ь',\r\n    'Э',\r\n    'Ю',\r\n    'Я',\r\n  ].map((letter, index) => [letter, letter === 'Ц' ? 21 : index + 1])\r\n);\r\n\r\nconst getUniqueNumbersFromString = (inputString: string) =>\r\n  [...new Set(inputString.toUpperCase().replace(' ', '').split(''))].map(\r\n    (letter) => ALPHABET[letter]\r\n  );\r\n\r\nexport const createBlankArray = (length: number) => Array(length).fill(0);\r\n\r\nexport const mapMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => number\r\n) => matrix.map((row, i) => row.map((cell, j) => callback(cell, [i, j])));\r\n\r\nconst forEachMatrix = (\r\n  matrix: number[][],\r\n  callback: (value: number, [i, j]: [number, number]) => void\r\n) =>\r\n  matrix.forEach((row, i) => row.forEach((cell, j) => callback(cell, [i, j])));\r\n\r\nexport function GV(name: string, size: number, dividers: number[]) {\r\n  const numbers = getUniqueNumbersFromString(name).slice(0, size);\r\n\r\n  const blankMatrix = createBlankArray(numbers.length).map((row) =>\r\n    createBlankArray(numbers.length)\r\n  );\r\n\r\n  // Вспомогательная матрица\r\n  const helperMatrix = mapMatrix(blankMatrix, (value, [i, j]) =>\r\n    Math.abs(numbers[j] - numbers[i])\r\n  );\r\n\r\n  //Матрица инцидентности\r\n  const adjacencyMatrix = mapMatrix(helperMatrix, (value, [i, j]) =>\r\n    Number(\r\n      dividers.some((divider) => (value % divider === 0 && i !== j ? 1 : 0))\r\n    )\r\n  );\r\n\r\n  return {\r\n    helperMatrix,\r\n    adjacencyMatrix,\r\n  };\r\n}\r\n\r\nfunction prettyPrintMatrix(mat: number[][]) {\r\n  let shape = [mat.length, mat[0].length];\r\n  function col(mat: number[][], i: number) {\r\n    return mat.map((row) => row[i]);\r\n  }\r\n  let colMaxes: number[] = [];\r\n  for (let i = 0; i < shape[1]; i++) {\r\n    colMaxes.push(\r\n      Math.max.apply(\r\n        null,\r\n        col(mat, i).map((n) => n.toString().length)\r\n      )\r\n    );\r\n  }\r\n\r\n  mat.forEach((row) => {\r\n    console.log.apply(\r\n      null,\r\n      row.map((val, j) => {\r\n        return (\r\n          new Array(colMaxes[j] - val.toString().length + 1).join(' ') +\r\n          val.toString() +\r\n          '  '\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nfunction adjMatrixToAdjList() {\r\n  /* ... */\r\n}\r\n\r\nfunction encodeAdjacencyMatrix(matrix: number[][]) {\r\n  return matrix\r\n    .map((row) => row.map((value, j) => value && j).filter(Boolean))\r\n    .flatMap((adjacents, i) => adjacents.map((adjacent) => [i, adjacent]));\r\n}\r\n\r\n// require.main === module &&\r\n//   (() => {\r\n//     const name = process.argv[2];\r\n//     const size = Number(process.argv[3]);\r\n//     const dividers = JSON.parse(process.argv[4]);\r\n//     const { helperMatrix, adjacencyMatrix } = GV(name, size, dividers);\r\n\r\n//     console.log('Цифры из ФИО: ', getUniqueNumbersFromString(name));\r\n\r\n//     console.log();\r\n//     console.log('Вспомогательная матрица: ');\r\n//     prettyPrintMatrix(helperMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Матрица смежности: ');\r\n//     prettyPrintMatrix(adjacencyMatrix);\r\n\r\n//     console.log();\r\n//     console.log('Цифры для сайта: ');\r\n//     encodeAdjacencyMatrix(adjacencyMatrix).forEach(([i, adjacent]) =>\r\n//       console.log(i + 1, adjacent + 1)\r\n//     );\r\n//   })();\r\n","export function mapCsvToMatrix(csv: string) {\r\n  return csv.length === 0\r\n    ? []\r\n    : csv.split('\\n').map((rowString) => rowString.split(' ').map(Number));\r\n}\r\n","import { IThemes } from '../types/modelTypes';\r\n\r\nexport const DEFAULT_ADJACENCY_MATRIX = [\r\n  [0, 2, 5, 9, 0, 0, 0],\r\n  [2, 0, 2, 0, 7, 0, 0],\r\n  [5, 2, 0, 1, 4, 3, 0],\r\n  [9, 0, 1, 0, 0, 4, 0],\r\n  [0, 7, 4, 0, 0, 1, 5],\r\n  [0, 0, 3, 4, 1, 0, 7],\r\n  [0, 0, 0, 0, 5, 7, 0],\r\n];\r\n\r\nexport const THEMES: IThemes = {\r\n  dark: {\r\n    primary: 'white',\r\n    background: 'black',\r\n    secondary: 'lightgrey',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n  light: {\r\n    primary: 'black',\r\n    background: 'white',\r\n    secondary: 'black',\r\n    text: 'darkgrey',\r\n    accent: 'red',\r\n  },\r\n};","export function fileLoadHandler(\r\n  changeEvent: React.ChangeEvent<HTMLInputElement>\r\n) {\r\n  return new Promise<string>((resolve, reject) => {\r\n    changeEvent.preventDefault();\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (fileEvent) => {\r\n      const text = fileEvent.target?.result;\r\n      console.log('File loaded', { text });\r\n      resolve(String(text));\r\n    };\r\n\r\n    const fileBlob = changeEvent.target.files?.[0];\r\n    console.log({ fileBlob, files: changeEvent.target.files });\r\n\r\n    if (fileBlob) {\r\n      console.log('Begin loading file');\r\n      reader.readAsText(fileBlob);\r\n    } else {\r\n      reject(\"Error: can't begin reading the file: file is null\");\r\n    }\r\n  });\r\n}\r\n","export const toggle = (flag: boolean) => !flag;\r\n","import {\r\n  combine,\r\n  createEffect,\r\n  createEvent,\r\n  createStore,\r\n  restore,\r\n  sample,\r\n} from 'effector-logger';\r\nimport { GraphData } from 'react-force-graph-2d';\r\nimport { addWeightsMatrixToD3Graph } from '../lib/addWeightsMatrixToD3Graph';\r\nimport { createBlankMatrix } from '../lib/createBlankMatrix';\r\nimport { fitMatrixToAnother } from '../lib/fitMatrixToAnother';\r\nimport { GV } from '../lib/GV';\r\nimport {\r\n  ILink,\r\n  mapAdjacencyAndWeightMatrixToD3Graph,\r\n} from '../lib/mapAdjacencyMatrixToD3Graph';\r\nimport { mapCsvToMatrix } from '../lib/mapCsvToMatrix';\r\nimport { IThemes, TDisplayMode } from '../types/modelTypes';\r\nimport { THEMES } from './defaults';\r\nimport { fileLoadHandler } from './effect-handlers/fileLoadHandler';\r\nimport { toggle } from './reducers/toggle';\r\n\r\n// Ивенты для переключения темы и режима 2D/3D\r\nexport const toggleTheme = createEvent<React.MouseEvent>();\r\nexport const toggleMode = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для различных меню\r\nexport const toggleAdjacencyMatrixModal = createEvent<React.MouseEvent>();\r\nexport const toggleWeightMatrixModal = createEvent<React.MouseEvent>();\r\nexport const toggleListingModal = createEvent<React.MouseEvent>();\r\nexport const toggleActions = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для загрузки графа\r\nexport const loadGraphFromGV = createEvent<React.MouseEvent>();\r\nexport const loadAdjacencyMatrixFromFile = createEvent<React.MouseEvent>();\r\nexport const loadWeightMatrixFromFile = createEvent<React.MouseEvent>();\r\n\r\nexport const addNodeToGraph = createEvent<React.MouseEvent>();\r\nexport const removeLastNodeFromGraph = createEvent<React.MouseEvent>();\r\n\r\n// Ивенты для GV\r\nexport const setName = createEvent<string>();\r\nexport const setSize = createEvent<string>();\r\nexport const setDividers = createEvent<string>();\r\n\r\nexport const setAdjacencyMatrix = createEvent<number[][]>();\r\nexport const setWeightMatrix = createEvent<number[][]>();\r\n\r\n// Ивенты для листинга\r\nexport const setListingString = createEvent<string>();\r\n\r\n// Ивенты относящиеся к подсветке остовного дерева\r\nexport const setHilightedSubGraph = createEvent<GraphData>();\r\nexport const toggleIsHighlighted = createEvent<void>();\r\n\r\n// Эффект для загрузки матрицы смежности из файла\r\nexport const fxLoadAdjacencyMatrixFromFile = createEffect({\r\n  handler: fileLoadHandler,\r\n});\r\n\r\nexport const fxLoadWeightMatrixFromFile = createEffect({\r\n  handler: fileLoadHandler,\r\n});\r\n\r\n// Сторы для темы и режима\r\nexport const $theme = createStore<keyof IThemes>('dark').on(\r\n  toggleTheme,\r\n  (theme) => (theme === 'dark' ? 'light' : 'dark')\r\n);\r\nexport const $mode = createStore<TDisplayMode>('3D').on(toggleMode, (mode) =>\r\n  mode === '3D' ? '2D' : '3D'\r\n);\r\nexport const $colors = $theme.map((theme) => THEMES[theme]);\r\n\r\nexport const $isAdjacencyMatrixModalOpened = createStore(false).on(\r\n  toggleAdjacencyMatrixModal,\r\n  toggle\r\n);\r\n\r\nexport const $isWeightMatrixModalOpened = createStore(false).on(\r\n  toggleWeightMatrixModal,\r\n  toggle\r\n);\r\n\r\nexport const $isListingModalOpened = createStore(false).on(\r\n  toggleListingModal,\r\n  toggle\r\n);\r\n\r\nexport const $isActionsMinimised = createStore(false).on(toggleActions, toggle);\r\n\r\n// Сторы для подсветки остовного дерева\r\nexport const $isHighlighted = createStore<boolean>(false).on(\r\n  toggleIsHighlighted,\r\n  toggle\r\n);\r\n\r\nexport const $listingString = restore<string>(setListingString, '');\r\n\r\nexport const $hilightedSubGraph = restore<GraphData>(setHilightedSubGraph, {\r\n  links: [],\r\n  nodes: [],\r\n}).reset(loadAdjacencyMatrixFromFile, loadGraphFromGV);\r\n\r\nexport const $weightMatrixFileContents = restore<string>(\r\n  fxLoadWeightMatrixFromFile.doneData,\r\n  ''\r\n);\r\nexport const $adjacencyMatrixFileContents = restore<string>(\r\n  fxLoadAdjacencyMatrixFromFile.doneData,\r\n  ''\r\n);\r\n\r\nexport const $adjacencyMatrix = restore<number[][]>(setAdjacencyMatrix, [[]])\r\n  .on(addNodeToGraph, (state) =>\r\n    state[0].length === 0\r\n      ? [[0]]\r\n      : fitMatrixToAnother(state, createBlankMatrix(state.length + 1, 0), 0)\r\n  )\r\n  .on(removeLastNodeFromGraph, (state) =>\r\n    state.length === 1\r\n      ? [[]]\r\n      : fitMatrixToAnother(state, createBlankMatrix(state.length - 1, 0), 0)\r\n  );\r\nexport const $weightMatrix = restore<number[][]>(setWeightMatrix, [\r\n  [],\r\n]).on($adjacencyMatrix, (state, payload) =>\r\n  payload.length === state.length\r\n    ? state\r\n    : payload.length > state.length\r\n    ? fitMatrixToAnother(state, payload)\r\n    : state.slice(0, payload.length).map((row) => row.slice(0, payload.length))\r\n);\r\n\r\n// GV сторы\r\nexport const $gvName = restore(setName, 'Зайцев Евгений Александрович');\r\nexport const $gvSize = restore(setSize, '7');\r\nexport const $gvDividers = restore(setDividers, '2 3');\r\n\r\n// Основной стор с D3 графом\r\nexport const $graph = combine(\r\n  $adjacencyMatrix,\r\n  $weightMatrix\r\n).map(([adjacencyMatrix, weightMatrix]) =>\r\n  mapAdjacencyAndWeightMatrixToD3Graph(adjacencyMatrix, weightMatrix)\r\n);\r\n\r\n// Берём в графостор GV по инпутосторам по вызову loadGraphFromGV\r\nsample({\r\n  clock: loadGraphFromGV,\r\n  source: combine($gvName, $gvSize, $gvDividers),\r\n  fn: ([name, size, dividers]) =>\r\n    GV(\r\n      name.replace(' ', ''),\r\n      !isNaN(Number(size)) ? Number(size) : 7,\r\n      dividers\r\n        .split(' ')\r\n        .map((divider) => (!isNaN(Number(divider)) ? Number(divider) : 1))\r\n    ).adjacencyMatrix,\r\n  target: $adjacencyMatrix,\r\n});\r\n\r\n// Берём в графостор данные из файлостора по вызову loadGraphFromFile\r\nsample({\r\n  clock: loadAdjacencyMatrixFromFile,\r\n  source: $adjacencyMatrixFileContents,\r\n  fn: mapCsvToMatrix,\r\n  target: $adjacencyMatrix,\r\n});\r\n\r\nsample({\r\n  clock: loadWeightMatrixFromFile,\r\n  source: $weightMatrixFileContents,\r\n  fn: mapCsvToMatrix,\r\n  target: $weightMatrix,\r\n});\r\n","import { mapMatrix } from './mapMatrix';\r\n\r\nexport interface ILink {\r\n  source: number;\r\n  target: number;\r\n  weight: number;\r\n}\r\n\r\nexport function mapAdjacencyAndWeightMatrixToD3Graph(\r\n  adjacencyMatrix: number[][],\r\n  weightMatrix: number[][]\r\n) {\r\n  const nodes = adjacencyMatrix[0].map((row, i) => ({ id: i + 1 }));\r\n  const links = mapMatrix(adjacencyMatrix, (cell, [i, j]) =>\r\n    cell\r\n      ? [\r\n          {\r\n            source: i + 1,\r\n            target: j + 1,\r\n            weight: weightMatrix[i]?.[j] ?? 1,\r\n          },\r\n        ]\r\n      : []\r\n  ).flat(2);\r\n\r\n  return { nodes, links };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport SpriteText from 'three-spritetext';\r\nimport { SphereGeometry, MeshLambertMaterial, Mesh, Object3D } from 'three';\r\nimport { NodeObject } from 'react-force-graph-3d';\r\n\r\nconst CONFIG = {\r\n  nodeResolution: 20,\r\n};\r\n\r\nexport function makeCreateSphere({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createSphere({ id }: NodeObject) {\r\n    const sphere = new SphereGeometry(\r\n      10,\r\n      CONFIG.nodeResolution,\r\n      CONFIG.nodeResolution\r\n    );\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    const material = new MeshLambertMaterial({\r\n      color: isInHilightedSubGraph ? colors.accent : colors.primary,\r\n      transparent: true,\r\n      opacity: 0.75,\r\n    });\r\n\r\n    const textSprite = new SpriteText(String(id), 8, colors.text);\r\n    const sphereMesh = new Mesh(sphere, material);\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(sphereMesh);\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport SpriteText from 'three-spritetext';\r\nimport * as d3 from 'd3';\r\nimport {\r\n  LineBasicMaterial,\r\n  Vector3,\r\n  BufferGeometry,\r\n  Object3D,\r\n  Line,\r\n  BufferAttribute,\r\n  VertexColors,\r\n} from 'three';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nexport function makeCreateLink3D({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createLink3D(link: LinkObject) {\r\n    // extend link with text sprite\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const textSprite = new SpriteText(`${weight}`);\r\n    textSprite.color = colors.primary;\r\n    textSprite.backgroundColor = 'transparent';\r\n    textSprite.textHeight = 5;\r\n\r\n    const composedObject = new Object3D();\r\n    composedObject.add(textSprite);\r\n\r\n    return composedObject;\r\n  };\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\nimport { LinkObject } from 'react-force-graph-3d';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateLink2D({ colors }: ICustomObjectFactoryParams) {\r\n  return (link: LinkObject, ctx: CanvasRenderingContext2D) => {\r\n    const MAX_FONT_SIZE = 4;\r\n    const LABEL_NODE_MARGIN = 10;\r\n\r\n    const start = link.source;\r\n    const end = link.target;\r\n\r\n    // ignore unbound links\r\n    if (typeof start !== 'object' || typeof end !== 'object') return;\r\n\r\n    // calculate label positioning\r\n\r\n    // @ts-ignore\r\n    const textPos = Object.assign(\r\n      // @ts-ignore\r\n      ...['x', 'y'].map((c) => ({\r\n        // @ts-ignore\r\n        [c]: start[c] + (end[c] - start[c]) / 2, // calc middle point\r\n      }))\r\n    );\r\n\r\n    // @ts-ignore\r\n    const relLink = { x: end.x - start.x, y: end.y - start?.y };\r\n\r\n    let textAngle = Math.atan2(relLink.y, relLink.x);\r\n    // maintain label vertical orientation for legibility\r\n    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\r\n    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\r\n\r\n    // @ts-ignore\r\n    const { weight } = link;\r\n\r\n    const label = String(weight);\r\n    const textWidth = ctx.measureText(label).width;\r\n\r\n    // estimate fontSize to fit in link length\r\n    const fontSize = SIZE / 1.5;\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n\r\n    // draw text label (with background rect)\r\n    ctx.save();\r\n    ctx.translate(textPos.x, textPos.y);\r\n    ctx.rotate(textAngle);\r\n\r\n    ctx.fillStyle = colors.background;\r\n    ctx.beginPath();\r\n    ctx.rect(-2 - textWidth / 2, -10, textWidth + 4, 20);\r\n    ctx.fill();\r\n\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(label, 0, 0);\r\n    ctx.restore();\r\n  };\r\n}\r\n","import { Object3D } from 'three';\r\n\r\ninterface Coords {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport function link3DPositionUpdateFn(\r\n  sprite: Object3D,\r\n  { start, end }: { start: Coords; end: Coords }\r\n) {\r\n  const middlePos = Object.assign(\r\n    // @ts-ignore\r\n    ...['x', 'y', 'z'].map((c) => ({\r\n      // @ts-ignore\r\n      [c]: start[c] + (end[c] - start[c]) / 2,\r\n    }))\r\n  );\r\n\r\n  // Position sprite\r\n  Object.assign(sprite.position, middlePos);\r\n\r\n  return false;\r\n}\r\n","import { ICustomObjectFactoryParams } from '../../types/factoryTypes';\r\n\r\nconst SIZE = 30;\r\n\r\nexport function makeCreateCircle({\r\n  colors,\r\n  highlightedSubGraph,\r\n}: ICustomObjectFactoryParams) {\r\n  return function createCircle(\r\n    { id, x, y }: { id?: number | string; x: number; y: number },\r\n    ctx: CanvasRenderingContext2D,\r\n    globalScale: number\r\n  ) {\r\n    const fontSize = SIZE / 1.5;\r\n\r\n    const text = String(id);\r\n\r\n    const isInHilightedSubGraph = highlightedSubGraph.nodes.find(\r\n      (node) => id === node.id\r\n    );\r\n\r\n    ctx.fillStyle = isInHilightedSubGraph ? colors.accent : colors.background;\r\n    ctx.strokeStyle = colors.primary;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, SIZE, 0, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = `${fontSize}px Sans-Serif`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = colors.primary;\r\n    ctx.fillText(text, x, y);\r\n  };\r\n}\r\n","import { matrixToPrettyString } from '../../lib/matrixToPrettyString';\r\n\r\n/**\r\n * Range from 0..N exclusive (0..N-1)\r\n * @param N end index, exclusive\r\n */\r\nconst range = (N: number) => [...Array(N).keys()];\r\n\r\nexport function* mstPrimGen(\r\n  adjacencyMatrix: number[][],\r\n  weightMatrix: number[][]\r\n) {\r\n  const N = adjacencyMatrix.length;\r\n  const vertices = range(N);\r\n  const reached = [];\r\n  const unreached = [...vertices];\r\n  const solution: [number, number][] = [];\r\n\r\n  const listing: string[] = [];\r\n\r\n  reached.push(unreached[0]);\r\n  unreached.splice(0, 1);\r\n\r\n  listing.push(`Входные данные данные: `);\r\n  listing.push(`---- Матрица смежности: `);\r\n  listing.push(matrixToPrettyString(adjacencyMatrix));\r\n  listing.push(`---- Матрица весов: `);\r\n  listing.push(matrixToPrettyString(weightMatrix));\r\n\r\n  listing.push(``);\r\n  listing.push(`Задаём исходные данные: `);\r\n  listing.push(`min: integer = INF`);\r\n  listing.push(\r\n    `reached: integer[] = [1] // Массив проверенных (пройденных вершин) - занесена первая`\r\n  );\r\n  listing.push(\r\n    `unreached: integer[] = 2..N // Массив непроверенных (непройденных вершин) - занесены все остальные кроме первой`\r\n  );\r\n  listing.push(`min: integer = INF`);\r\n  listing.push(`rIndex: integer = 0 // Сохранённый индекс в массиве reached`);\r\n  listing.push(`uIndex: integer = 0 // Сохранённый индекс в массиве unreached`);\r\n\r\n  listing.push(``);\r\n  listing.push(\r\n    `Начинаем цикл без счётчика до тех пор пока unreached не будет пуст...`\r\n  );\r\n  while (unreached.length > 0) {\r\n    let min = Number.MAX_SAFE_INTEGER;\r\n    let rIndex = 0;\r\n    let uIndex = 0;\r\n\r\n    listing.push('---- Проход цикла по проверенным вершинам, счётчик i...');\r\n    for (var i = 0; i < reached.length; i++) {\r\n      listing.push(`-------- Цикл i: ${i + 1}`);\r\n\r\n      listing.push(\r\n        `-------- Для вершины ${\r\n          i + 1\r\n        } делаем проход цикла по непроверенным вершинам, счётчик j...`\r\n      );\r\n      for (var j = 0; j < unreached.length; j++) {\r\n        listing.push(`------------ Цикл j: ${j + 1}`);\r\n\r\n        const weight = weightMatrix[reached[i]]?.[unreached[j]] ?? 1;\r\n        const isAdjacent = adjacencyMatrix[reached[i]][unreached[j]] !== 0;\r\n\r\n        listing.push(\r\n          `------------ Сравниваем вес ребра ${i + 1},${\r\n            j + 1\r\n          } с min, если он меньше, и ребро смежно с текущей компонентой, то записываем его в min...`\r\n        );\r\n        if (weight < min && isAdjacent) {\r\n          min = weight;\r\n          rIndex = i;\r\n          uIndex = j;\r\n\r\n          listing.push(\r\n            `---------------- Вес ребра ${i + 1},${\r\n              j + 1\r\n            } меньше min. Новые значения: `\r\n          );\r\n          listing.push(`---------------- min = ${min}`);\r\n          listing.push(`---------------- rIndex = ${rIndex + 1}`);\r\n          listing.push(`---------------- uIndex = ${uIndex + 1}`);\r\n        } else {\r\n          listing.push(\r\n            `---------------- Вес ребра больше, или вершина не смежна с текущей компонентой.`\r\n          );\r\n          listing.push(`---------------- Данные не изменены.`);\r\n        }\r\n\r\n        listing.push(`------------ Конец цикла j: ${j + 1}`);\r\n      }\r\n      listing.push(`-------- Конец цикла i: ${i + 1}`);\r\n    }\r\n\r\n    solution.push([reached[rIndex] + 1, unreached[uIndex] + 1]);\r\n\r\n    listing.push(``);\r\n    listing.push(\r\n      `---- Записываем найденное ребро в решение: [${reached[rIndex] + 1}, ${\r\n        unreached[uIndex] + 1\r\n      }]`\r\n    );\r\n\r\n    listing.push(``);\r\n    listing.push(\r\n      `---- Изменяем данные перед концом итерации цикла без счётчика: `\r\n    );\r\n    listing.push(`---- reached = reached + [${unreached[uIndex]}]`);\r\n    listing.push(`---- unreached = unreached - [${unreached[uIndex]}]`);\r\n    listing.push(`---- Конец итерации цикла без счётчика.`);\r\n\r\n    yield { solution, listing };\r\n\r\n    reached.push(unreached[uIndex]);\r\n    unreached.splice(uIndex, 1);\r\n  }\r\n\r\n  listing.push(\r\n    `---- Конец цикла без счётчика. Алгоритм завершён. Решение (рёбра маршрута): `\r\n  );\r\n  listing.push(matrixToPrettyString(solution));\r\n\r\n  yield { solution, listing };\r\n\r\n  return { solution, listing };\r\n}\r\n","/**\r\n * Returns a promise that resolves after `seconds`\r\n * @param seconds seconds\r\n */\r\nexport function wait(seconds: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\r\n}\r\n","import { noop } from 'lodash';\r\nimport './modal.scss';\r\n\r\ninterface IModalProps {\r\n  children: React.ReactNode;\r\n  visible?: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport function Modal({\r\n  children,\r\n  visible = false,\r\n  onClose = noop,\r\n}: IModalProps) {\r\n  return visible ? (\r\n    <div className=\"modal\">\r\n      {children}\r\n      <div className=\"modal__close\" onClick={onClose}>\r\n        ×\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n","import { noop } from 'lodash';\r\nimport './overlay.scss';\r\n\r\ninterface IOverlayProps {\r\n  children: React.ReactNode;\r\n  minimized?: boolean;\r\n  title?: React.ReactNode;\r\n  onToggle?: () => void;\r\n}\r\n\r\nexport function Overlay({\r\n  children,\r\n  minimized = false,\r\n  title = 'Actions',\r\n  onToggle = noop,\r\n}: IOverlayProps) {\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"overlay__title-container\">\r\n        {title}\r\n        <div className={`overlay__toggle`} onClick={onToggle}>\r\n          {minimized ? '▼' : '▲'}\r\n        </div>\r\n      </div>\r\n      {!minimized && (\r\n        <div className=\"overlay__content-container\">{children}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { noop } from 'lodash';\r\nimport './matrix.scss';\r\n\r\ninterface IMatrixProps {\r\n  matrix: number[][];\r\n  onEditCell?: (ij: [number, number], newValue: string) => void;\r\n  onAddRow?: () => void;\r\n  onAddCol?: () => void;\r\n  onRemoveRow?: () => void;\r\n  onRemoveCol?: () => void;\r\n}\r\n\r\nexport function Matrix({\r\n  matrix,\r\n  onEditCell = noop,\r\n  onAddRow = noop,\r\n  onAddCol = noop,\r\n  onRemoveRow = noop,\r\n  onRemoveCol = noop,\r\n}: IMatrixProps) {\r\n  function makeHandleChange(ij: [number, number]) {\r\n    return function handleKeyPress(e: React.ChangeEvent<HTMLInputElement>) {\r\n      onEditCell(ij, e.currentTarget.value);\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div className=\"matrix\">\r\n      {matrix[0].length === 0\r\n        ? '∅'\r\n        : matrix.map((row, i) => (\r\n            <div className=\"matrix__row\">\r\n              {row.map((cell, j) => (\r\n                <div className=\"matrix__cell-container\">\r\n                  <input\r\n                    className=\"matrix__cell\"\r\n                    type=\"text\"\r\n                    value={cell}\r\n                    onChange={makeHandleChange([i, j])}\r\n                  />\r\n                  <div className=\"matrix__index\">\r\n                    {i + 1},{j + 1}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n      {/* <div className=\"matrix__controls\">\r\n        <div className=\"matrix__controls-row\">\r\n          <button className=\"matrix__add-row\" onClick={onAddRow}>+</button>\r\n          <button className=\"matrix__rem-row\" onClick={onRemoveRow}>-</button>\r\n        </div>\r\n        <div className=\"matrix__controls-col\">\r\n          <button className=\"matrix__add-col\" onClick={onAddCol}>+</button>\r\n          <button className=\"matrix__rem-col\" onClick={onRemoveCol}>-</button>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","export function validateNumber(\r\n  input: string,\r\n  defaultReturn: number,\r\n  customCheckFn = (input: number) => true\r\n) {\r\n  const number = Number(input);\r\n\r\n  return !isNaN(number) && customCheckFn(number) ? number : defaultReturn;\r\n}\r\n","import { mapMatrix } from '../../lib/mapMatrix';\r\n\r\nexport function editInMatrix(\r\n  matrix: number[][],\r\n  [i, j]: [number, number],\r\n  newValue: number\r\n) {\r\n  return mapMatrix(matrix, (value, [Mi, Mj]) =>\r\n    (Mi === i && Mj === j) || (Mi === j && Mj === i) ? newValue : value\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { uniqBy } from 'lodash';\r\nimport './App.scss';\r\nimport '../lib/styles/classes.scss';\r\nimport { mstPrim } from '../feature/prims-algorithm/mst-prim';\r\nimport ForceGraph3D from 'react-force-graph-3d';\r\nimport type { ForceGraphMethods } from 'react-force-graph-3d';\r\nimport ForceGraph2D, { ForceGraphProps } from 'react-force-graph-2d';\r\n\r\nimport { Event } from 'effector-logger';\r\nimport { useStore } from 'effector-react';\r\nimport {\r\n  $colors,\r\n  $mode,\r\n  $graph,\r\n  $gvDividers,\r\n  $gvName,\r\n  $gvSize,\r\n  toggleTheme,\r\n  toggleMode,\r\n  setSize,\r\n  loadGraphFromGV,\r\n  loadAdjacencyMatrixFromFile,\r\n  loadWeightMatrixFromFile,\r\n  setName,\r\n  setDividers,\r\n  fxLoadAdjacencyMatrixFromFile,\r\n  fxLoadWeightMatrixFromFile,\r\n  $adjacencyMatrix,\r\n  setHilightedSubGraph,\r\n  $hilightedSubGraph,\r\n  $weightMatrix,\r\n  toggleAdjacencyMatrixModal,\r\n  toggleWeightMatrixModal,\r\n  toggleActions,\r\n  $isActionsMinimised,\r\n  $isAdjacencyMatrixModalOpened,\r\n  $isWeightMatrixModalOpened,\r\n  $theme,\r\n  setAdjacencyMatrix,\r\n  setWeightMatrix,\r\n  addNodeToGraph,\r\n  removeLastNodeFromGraph,\r\n  setListingString,\r\n  $isListingModalOpened,\r\n  $listingString,\r\n  toggleListingModal,\r\n} from '../model';\r\nimport { makeCreateSphere } from '../feature/graph-visualization/createSphere';\r\nimport { makeCreateLink3D } from '../feature/graph-visualization/createLink3D';\r\nimport { makeCreateLink2D } from '../feature/graph-visualization/createLink2D';\r\nimport { link3DPositionUpdateFn } from '../feature/graph-visualization/link3DPositionUpdateFn';\r\nimport { makeCreateCircle } from '../feature/graph-visualization/createCircle';\r\nimport { mstPrimGen } from '../feature/prims-algorithm/mst-prim-generator';\r\nimport { wait } from '../lib/wait';\r\nimport { Modal } from '../lib/components/modal/Modal';\r\nimport { Overlay } from '../lib/components/overlay/Overlay';\r\nimport { Matrix } from '../lib/components/matrix-table/Matrix';\r\nimport { validateNumber } from '../feature/graph-visualization/validateNumber';\r\nimport { editInMatrix } from '../feature/graph-visualization/editInMatrix';\r\n\r\nconst DISTANCE = 500;\r\n\r\nexport function App() {\r\n  const colors = useStore($colors);\r\n  const mode = useStore($mode);\r\n  const theme = useStore($theme);\r\n\r\n  const graph = useStore($graph);\r\n  const adjacencyMatrix = useStore($adjacencyMatrix);\r\n  const weightMatrix = useStore($weightMatrix);\r\n\r\n  const isListingModalOpened = useStore($isListingModalOpened);\r\n  const listingString = useStore($listingString);\r\n\r\n  const name = useStore($gvName);\r\n  const size = useStore($gvSize);\r\n  const dividers = useStore($gvDividers);\r\n\r\n  const highlightedSubGraph = useStore($hilightedSubGraph);\r\n\r\n  const isActionsMinimised = useStore($isActionsMinimised);\r\n  const isAdjacencyMatrixModalOpened = useStore($isAdjacencyMatrixModalOpened);\r\n  const isWeightMatrixModalOpened = useStore($isWeightMatrixModalOpened);\r\n\r\n  const graph3DRef = useRef<ForceGraphMethods>();\r\n  const graph2DRef = useRef<ForceGraphMethods>();\r\n\r\n  // Установка силы отторжения между вершинами\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    graph3DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('link').distance(DISTANCE);\r\n    // @ts-ignore\r\n    graph2DRef.current?.d3Force('charge').strength(-DISTANCE);\r\n  });\r\n\r\n  function makeHandleChange(setter: Event<string>) {\r\n    return function (e: React.ChangeEvent<HTMLInputElement>) {\r\n      setter(e.currentTarget.value);\r\n    };\r\n  }\r\n\r\n  const params: ForceGraphProps = {\r\n    graphData: graph,\r\n    backgroundColor: colors.background,\r\n    nodeLabel: (node) => String(node.id),\r\n    nodeColor: () => colors.primary,\r\n    linkColor: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? colors.accent\r\n        : colors.secondary,\r\n\r\n    linkWidth: ({ source, target }) =>\r\n      highlightedSubGraph.links.find((subGraphLink) => {\r\n        return (\r\n          // @ts-ignore\r\n          subGraphLink.source === source.id && subGraphLink.target === target.id\r\n        );\r\n      })\r\n        ? 6\r\n        : 2,\r\n  };\r\n\r\n  async function handleCalculatePrimAnimClick(\r\n    e: React.MouseEvent<HTMLButtonElement>\r\n  ) {\r\n    // Генераторная версия алгоритма, возвращающая значения по шагам\r\n    const mstGen = mstPrimGen(adjacencyMatrix, weightMatrix);\r\n\r\n    for (const partialMST of mstGen) {\r\n      const links = partialMST.solution.map(([source, target]) => ({\r\n        source,\r\n        target,\r\n      }));\r\n\r\n      // Маппим пары вершин (рёбра) в уникальные вершины задействованные в этих рёбрах\r\n      const nodes = uniqBy(\r\n        partialMST.solution.flatMap(([source, target]) => [\r\n          { id: source },\r\n          { id: target },\r\n        ]),\r\n        'id'\r\n      );\r\n\r\n      setHilightedSubGraph({ nodes, links });\r\n      setListingString(partialMST.listing.join('\\n'));\r\n      await wait(0.5);\r\n    }\r\n  }\r\n\r\n  function handleCalculatePrimClick(e: React.MouseEvent<HTMLButtonElement>) {\r\n    const { solution, listing } = mstPrim(adjacencyMatrix, weightMatrix);\r\n\r\n    const links = solution.map(([source, target]) => ({ source, target }));\r\n\r\n    // Маппим пары вершин (рёбра) в уникальные вершины задействованные в этих рёбрах\r\n    const nodes = uniqBy(\r\n      solution.flatMap(([source, target]) => [{ id: source }, { id: target }]),\r\n      'id'\r\n    );\r\n\r\n    setListingString(listing.join('\\n'));\r\n    setHilightedSubGraph({ nodes, links });\r\n  }\r\n\r\n  function handleZoomToFitClick() {\r\n    graph3DRef.current?.zoomToFit(400);\r\n    graph2DRef.current?.zoomToFit(400);\r\n  }\r\n\r\n  const customRenderObjectParams = { colors, highlightedSubGraph };\r\n\r\n  function handleEditAdjacencyMatrixCell(\r\n    [i, j]: [number, number],\r\n    newValue: string\r\n  ) {\r\n    const validatedInput = validateNumber(\r\n      newValue,\r\n      0,\r\n      (value) => (value === 0 || value === 1) && i !== j\r\n    );\r\n    const newMatrix = editInMatrix(adjacencyMatrix, [i, j], validatedInput);\r\n\r\n    setAdjacencyMatrix(newMatrix);\r\n  }\r\n\r\n  function handleEditWeightMatrixCell(\r\n    [i, j]: [number, number],\r\n    newValue: string\r\n  ) {\r\n    const validatedInput = validateNumber(newValue, 0, () => i !== j);\r\n    const newMatrix = editInMatrix(weightMatrix, [i, j], validatedInput);\r\n\r\n    setWeightMatrix(newMatrix);\r\n  }\r\n\r\n  function handleDownloadListingClick() {\r\n    const data = new Blob([listingString], {\r\n      type: 'text/plain;charset=utf-8',\r\n    });\r\n    let textFile = null;\r\n\r\n    // If we are replacing a previously generated file we need to\r\n    // manually revoke the object URL to avoid memory leaks.\r\n    if (textFile !== null) {\r\n      window.URL.revokeObjectURL(textFile);\r\n    }\r\n\r\n    textFile = window.URL.createObjectURL(data);\r\n\r\n    const element = document.createElement('a');\r\n    element.style.height = '0px';\r\n    element.href = textFile;\r\n    element.download = 'Листинг алгоритма.txt';\r\n\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal\r\n        visible={isAdjacencyMatrixModalOpened}\r\n        onClose={toggleAdjacencyMatrixModal}\r\n      >\r\n        <p>Матрица смежности: </p>\r\n        <div className=\"matrix-edit-buttons\">\r\n          <button onClick={addNodeToGraph}>Добавить вершину</button>\r\n          <button onClick={removeLastNodeFromGraph}>Удалить вершину</button>\r\n        </div>\r\n        <Matrix\r\n          matrix={adjacencyMatrix}\r\n          onEditCell={handleEditAdjacencyMatrixCell}\r\n        ></Matrix>\r\n      </Modal>\r\n      <Modal\r\n        visible={isWeightMatrixModalOpened}\r\n        onClose={toggleWeightMatrixModal}\r\n      >\r\n        <p>Матрица весов: </p>\r\n        <Matrix\r\n          matrix={weightMatrix}\r\n          onEditCell={handleEditWeightMatrixCell}\r\n        ></Matrix>\r\n      </Modal>\r\n      <Modal visible={isListingModalOpened} onClose={toggleListingModal}>\r\n        <p>Листинг алгоритма: </p>\r\n        <pre>{listingString}</pre>\r\n        <button onClick={handleDownloadListingClick}>\r\n          Сохранить листинг на диск\r\n        </button>\r\n      </Modal>\r\n\r\n      <Overlay minimized={isActionsMinimised} onToggle={toggleActions}>\r\n        <button onClick={toggleTheme}>Тема: {theme}</button>\r\n        <br />\r\n        <button onClick={toggleMode}>Режим: {mode}</button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <label htmlFor=\"adjacencyMatrixFile\">Матрица смежности: </label>\r\n        <input type=\"file\" onChange={fxLoadAdjacencyMatrixFromFile} />\r\n        <br />\r\n        <label htmlFor=\"weightMatrixFile\">Матрица весов: </label>\r\n        <input type=\"file\" onChange={fxLoadWeightMatrixFromFile} />\r\n        <br />\r\n\r\n        <button onClick={loadAdjacencyMatrixFromFile}>\r\n          Загрузить матрицу смежности из файла\r\n        </button>\r\n        <button onClick={loadWeightMatrixFromFile}>\r\n          Загрузить матрицу весов из файла\r\n        </button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <label htmlFor=\"name\">Имя: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={makeHandleChange(setName)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"size\">Размер: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"size\"\r\n          value={size}\r\n          onChange={makeHandleChange(setSize)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"dividers\">Делители: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dividers\"\r\n          value={dividers}\r\n          onChange={makeHandleChange(setDividers)}\r\n        />\r\n        <br />\r\n        <button onClick={loadGraphFromGV}>Сгенерировать из GV</button>\r\n        <br />\r\n        <br />\r\n        <button onClick={handleCalculatePrimClick}>\r\n          Рассчитать алгоритм Прима\r\n        </button>\r\n        <br />\r\n        <button onClick={handleCalculatePrimAnimClick}>\r\n          Анимировать алгоритм Прима\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <button onClick={handleZoomToFitClick}>\r\n          Масштабировать чтобы помещалось\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <button onClick={toggleAdjacencyMatrixModal}>\r\n          Изменить матрицу смежности\r\n        </button>\r\n        <br />\r\n        <button onClick={toggleWeightMatrixModal}>\r\n          Изменить матрицу весов\r\n        </button>\r\n\r\n        <br />\r\n\r\n        <button onClick={toggleListingModal}>Листинг алгоритма...</button>\r\n      </Overlay>\r\n\r\n      {mode === '3D' ? (\r\n        <ForceGraph3D\r\n          {...params}\r\n          ref={graph3DRef}\r\n          nodeThreeObject={makeCreateSphere(customRenderObjectParams)}\r\n          linkThreeObject={makeCreateLink3D(customRenderObjectParams)}\r\n          linkThreeObjectExtend\r\n          linkPositionUpdate={link3DPositionUpdateFn}\r\n        />\r\n      ) : (\r\n        <ForceGraph2D\r\n          {...params}\r\n          // @ts-ignore\r\n          ref={graph2DRef}\r\n          nodeColor={colors.primary}\r\n          nodeCanvasObjectMode={() => 'after'}\r\n          nodeCanvasObject={makeCreateCircle(customRenderObjectParams) as any}\r\n          linkCanvasObjectMode={() => 'after'}\r\n          linkCanvasObject={makeCreateLink2D(customRenderObjectParams)}\r\n          nodeRelSize={30}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}